/****** Object:  Table [dbo].[cmhistorico]    Script Date: 03/20/2008 10:44:51 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procpact') AND NAME = 'Refresh')
ALTER TABLE [dbo].[procpact]
ADD [Refresh] [timestamp] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Refresh')
ALTER TABLE [dbo].[procdoc]
ADD [Refresh] [timestamp] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc') AND NAME = 'ValorMedico')
ALTER TABLE [dbo].[procdoc]
ADD [ValorMedico] [float] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Refresh')
ALTER TABLE [dbo].[swclientes]
ADD [Refresh] [timestamp] NULL;

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swClientes') AND NAME = 'DDDTelefone1')
ALTER TABLE dbo.swclientes ADD
 DDDTelefone1 varchar(2) NULL
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swClientes') AND NAME = 'DDDTelefone2')
ALTER TABLE dbo.swclientes ADD
 DDDTelefone2 varchar(2) NULL
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swClientes') AND NAME = 'DDDTelefone3')
ALTER TABLE dbo.swclientes ADD
 DDDTelefone3 varchar(2) NULL
GO

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Data_Cadastro')
ALTER TABLE [dbo].[swclientes]
ADD [Data_Cadastro] [datetime] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Hora_Cadastro')
ALTER TABLE [dbo].[swclientes]
ADD [Hora_Cadastro] [datetime] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'CNS')
ALTER TABLE [dbo].[swclientes]
ADD [CNS] [varchar] (50) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('acamostra') AND NAME = 'Codprocpact')
ALTER TABLE [dbo].[acamostra]
ADD [Codprocpact] [int] NULL;

GO
ALTER TABLE [dbo].[sistema]
ALTER COLUMN [Senha] [varchar](255) NULL;

GO
ALTER TABLE [dbo].[gtusuarios]
ALTER COLUMN [Senha] [varchar](255) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('convenio') AND NAME = 'PRValue')
ALTER TABLE [dbo].[convenio]
ADD [PRValue] [float] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMHISTORICO') AND NAME = 'Senha')
ALTER TABLE [dbo].[cmhistorico]
ADD [Senha] [varchar](50) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('GTUSUARIOS') AND NAME = 'Senha')
ALTER TABLE [dbo].[gtusuarios]
ADD [Senha] [varchar](20) NULL;

GO
ALTER TABLE [dbo].[swclientes]
ALTER COLUMN [RG] [varchar](50) NULL;

GO
ALTER TABLE [dbo].[swclientes]
ALTER COLUMN [Plano] [varchar](100) NULL;


GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMHISTORICO') AND NAME = 'Validade')
ALTER TABLE [dbo].[cmhistorico]
ADD [Validade] [datetime] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMHISTORICO') AND NAME = 'RespSenha')
ALTER TABLE [dbo].[cmhistorico]
ADD [RespSenha] [varchar] (70) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMHISTORICO') AND NAME = 'CodAla')
ALTER TABLE [dbo].[cmhistorico]
ADD [CodAla] [int] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMINTERNACAO') AND NAME = 'Codigo')
ALTER TABLE [dbo].[cminternacao]
ADD [Codigo] [int] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMINTERNACAO') AND NAME = 'Senha')
ALTER TABLE [dbo].[cminternacao]
ADD [Senha] [varchar](50) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMINTERNACAO') AND NAME = 'Validade')
ALTER TABLE [dbo].[cminternacao]
ADD [Validade] [datetime] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMINTERNACAO') AND NAME = 'RespSenha')
ALTER TABLE [dbo].[cminternacao]
ADD [RespSenha] [varchar] (70) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMINTERNA') AND NAME = 'Senha')
ALTER TABLE [dbo].[cminterna]
ADD [Senha] [varchar](50) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMINTERNA') AND NAME = 'Validade')
ALTER TABLE [dbo].[cminterna]
ADD [Validade] [datetime] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMINTERNA') AND NAME = 'RespSenha')
ALTER TABLE [dbo].[cminterna]
ADD [RespSenha] [varchar] (70) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('TSRESUMOITENS') AND NAME = 'PrintField')
EXEC sp_rename 'tsresumoitens.Print', 'PrintField', 'COLUMN'; 

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('TSRESUMOEQUIPE') AND NAME = 'PrintField')
EXEC sp_rename 'tsresumoequipe.Print', 'PrintField', 'COLUMN'; 

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMMEDICOS') AND NAME = 'TipoDoc')
ALTER TABLE [dbo].[cmmedicos]
ADD [TipoDoc] [int] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMMEDICOS') AND NAME = 'Documento')
ALTER TABLE [dbo].[cmmedicos]
ADD [Documento] [varchar] (50) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMMEDICOS') AND NAME = 'CNES')
ALTER TABLE [dbo].[cmmedicos]
ADD [CNES] [varchar] (15) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('PROCDOC') AND NAME = 'ContrSolic')
ALTER TABLE [dbo].[procdoc]
ADD [ContrSolic] [varchar] (50) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('PROCDOC') AND NAME = 'ContrExec')
ALTER TABLE [dbo].[procdoc]
ADD [ContrExec] [varchar] (50) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('PROCDOC') AND NAME = 'Recuperado')
ALTER TABLE [dbo].[procdoc]
ADD [Recuperado] [bit] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('PROCDOC') AND NAME = 'DataRecup')
ALTER TABLE [dbo].[procdoc]
ADD [DataRecup] [datetime] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('PROCPACT') AND NAME = 'Atendimento')
ALTER TABLE [dbo].[procpact]
ADD [Atendimento] [int] NULL;

GO
IF OBJECT_ID('TSINDICE') IS NULL
CREATE TABLE [dbo].[tsindice](
	[Tipo] [int] NOT NULL,
	[Codigo] [int] NULL,
	[Descricao] [varchar](70) NULL,
 CONSTRAINT [PK_tsindice] PRIMARY KEY CLUSTERED 
(
	[Tipo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF OBJECT_ID('TSIDPRESTADOR') IS NULL
CREATE TABLE [dbo].[tsidprestador](
	[Codigo] [int] NOT NULL,
	[CodMedico] [int] NULL,
	[CodConvenio] [int] NULL,
	[TipoDoc] [varchar](20) NULL,
	[Documento] [varchar](20) NULL,
 CONSTRAINT [PK_tsidprestador] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF OBJECT_ID('CMSENHAINTERNA') IS NULL
CREATE TABLE [dbo].[cmsenhainterna](
	[Codigo] [int] NOT NULL,
	[CodInternacao] [int] NULL,
        [Data] [datetime] NULL,
	[Senha] [varchar](50) NULL,
	[Validade] [datetime] NULL,
	[Responsavel] [varchar](70) NULL,
 CONSTRAINT [PK_cmsenhainterna] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF OBJECT_ID('medconv') IS NULL
CREATE TABLE [dbo].[medconv](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[CodMedico] [int] NULL,
	[CodConvenio] [int] NULL,
 CONSTRAINT [PK_medconv] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF OBJECT_ID('mtusuarios') IS NULL
CREATE TABLE [dbo].[mtusuarios](
	[CÃ³digo] [int] NULL,
	[Tipo] [varchar](1) NULL,
	[Especialidade] [int] NULL,
	[CRM] [varchar](20) NULL,
	[Mensagem] [varchar](100) NULL,
	[E-mail] [varchar](100) NULL,
	[Menu] [bit] NULL,
	[Toolbar] [bit] NULL,
	[Wallpaper] [bit] NULL,
	[Mouse] [bit] NULL,
	[Gradient] [bit] NULL,
	[CloseRoom] [bit] NULL,
	[AfterCons] [smallint] NULL,
	[BeforePresc] [smallint] NULL,
	[BeforeRotine] [smallint] NULL,
	[BeforeLaudo] [smallint] NULL,
	[Tecnologia] [int] NULL,
	[SWRegistro] [varchar](20) NULL,
	[WEB] [bit] NULL,
	[Inativo] [smallint] NULL,
	[TrocaSenha] [int] NULL,
	[ProximaTroca] [datetime] NULL
) ON [PRIMARY];

GO
IF OBJECT_ID('medconvitens') IS NULL
CREATE TABLE [dbo].[medconvitens](
	[CodMedconv] [int] NOT NULL,
	[CodProc] [int] NOT NULL,
	[Codigo] [varchar](20) NULL,
	[Procedimento] [varchar](255) NULL,
	[ValorAbsoluto] [float] NULL,
	[ValorPercentual] [float] NULL,
 CONSTRAINT [PK_medconvitens] PRIMARY KEY CLUSTERED 
(
	[CodMedconv] ASC,
	[CodProc] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmreinterna') AND NAME = 'DataSaida')
ALTER TABLE [dbo].[cmreinterna]
ADD [DataSaida] [datetime] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('TSGUIAS') AND NAME = 'Profissional')
ALTER TABLE [dbo].[tsguias]
ADD [Profissional] [varchar](70) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swconsultas') AND NAME = 'Refresh')
ALTER TABLE [dbo].[swconsultas]
ADD [Refresh] [timestamp] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'DataIdentidade')
ALTER TABLE [dbo].[swclientes]
ADD [DataIdentidade] datetime;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'IdentOrgaoExp')
ALTER TABLE [dbo].[swclientes]
ADD [IdentOrgaoExp] varchar(10); 
 
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'IdentEstado')
ALTER TABLE [dbo].[swclientes]
ADD [IdentEstado] varchar(2); 

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmlogs') AND NAME = 'CodSistema')
ALTER TABLE [dbo].[cmlogs]
ADD [CodSistema] [int] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmlogs') AND NAME = 'Descricao')
ALTER TABLE [dbo].[cmlogs]
ADD [Descricao] [varchar] (100) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmlogs') AND NAME = 'CodigoAuxiliar')
ALTER TABLE [dbo].[cmlogs]
ADD [CodigoAuxiliar] [varchar] (50) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmlogs') AND NAME = 'CodSis')
ALTER TABLE [dbo].[cmlogs]
ADD [CodSis] [int] NULL;


GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'EnderecoConsult')
exec sp_rename 'dbo.cmmedicos.Consultorio' , 'EnderecoConsult' , 'COLUMN';

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'EnderecoRes')
exec sp_rename 'dbo.cmmedicos.Residencia' , 'EnderecoRes' , 'COLUMN';

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'BairroConsult')
ALTER TABLE [dbo].[cmmedicos]
ADD [BairroConsult] [varchar] (30) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'CidadeConsult')
ALTER TABLE [dbo].[cmmedicos]
ADD [CidadeConsult] [varchar] (30) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'EstadoConsult')
ALTER TABLE [dbo].[cmmedicos]
ADD [EstadoConsult] [varchar] (2) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'BairroRes')
ALTER TABLE [dbo].[cmmedicos]
ADD [BairroRes] [varchar] (30) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'CidadeRes')
ALTER TABLE [dbo].[cmmedicos]
ADD [CidadeRes] [varchar] (30) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'EstadoRes')
ALTER TABLE [dbo].[cmmedicos]
ADD [EstadoRes] [varchar] (2) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'CepConsult')
ALTER TABLE [dbo].[cmmedicos]
ADD [CepConsult] [varchar] (10) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'CepRes')
ALTER TABLE [dbo].[cmmedicos]
ADD [CepRes] [varchar] (10) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'Email')
ALTER TABLE [dbo].[cmmedicos]
ADD [Email] [varchar] (80) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cpcategorias') AND NAME = 'Excluido')
ALTER TABLE [dbo].[cpcategorias]
ADD [Excluido] [bit] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cpsubcatpagar') AND NAME = 'Excluido')
ALTER TABLE [dbo].[cpsubcatpagar]
ADD [Excluido] [bit] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cpcontas_bancarias') AND NAME = 'Excluido')
ALTER TABLE [dbo].[cpcontas_bancarias]
ADD [Excluido] [bit] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cpcontas_receber') AND NAME = 'Excluido')
ALTER TABLE [dbo].[cpcontas_receber]
ADD [Excluido] [bit] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Valor_Recuperado')
ALTER TABLE [dbo].[procdoc]
ADD [Valor_Recuperado] [float] NULL;

GO
IF OBJECT_ID('atos') IS NULL
CREATE TABLE [dbo].[atos](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[CodMedconv] [int] NOT NULL,
	[Ato] [varchar](50) NULL,
	[ValorPercentual] [float] NULL,
 CONSTRAINT [PK_atos_1] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'Conselho')
ALTER TABLE [dbo].[cmmedicos]
ADD [Conselho] [varchar] (10) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'CalcEspec')
ALTER TABLE [dbo].[cmmedicos]
ADD [CalcEspec] [varchar] (70) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'Tipo')
ALTER TABLE [dbo].[cmmedicos]
ADD [Tipo] [int] NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('medconv') AND NAME = 'Tipo')
ALTER TABLE [dbo].[medconv]
ADD [Tipo] [varchar] (1) NULL;

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('eiespera') AND NAME = 'Data')
ALTER TABLE [dbo].[eiespera]
ADD [Data] [datetime] NULL;
GO

ALTER TABLE [dbo].[eiespera]
ALTER COLUMN [Data] [datetime] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('eiespera') AND NAME = 'Hora')
ALTER TABLE [dbo].[eiespera]
ADD [Hora] [datetime] NULL;
GO


ALTER TABLE [dbo].[eiespera]
ALTER COLUMN [Hora] [datetime] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('eiespera') AND NAME = 'Entrega')
ALTER TABLE [dbo].[eiespera]
ADD [Entrega] [datetime] NULL;
GO

ALTER TABLE [dbo].[eiespera]
ALTER COLUMN [Entrega] [datetime] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('acresulpad') AND NAME = 'Data')
ALTER TABLE [dbo].[acresulpad]
ADD [Data] [datetime] NULL;
GO

ALTER TABLE [dbo].[acresulpad]
ALTER COLUMN [Data] [datetime] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('acresulpad') AND NAME = 'Hora')
ALTER TABLE [dbo].[acresulpad]
ADD [Hora] [datetime] NULL;
GO

ALTER TABLE [dbo].[acresulpad]
ALTER COLUMN [Hora] [datetime] NULL;
GO

GO
ALTER TABLE [dbo].[acamostra]
ALTER COLUMN [Data] [datetime] NULL;

GO
ALTER TABLE [dbo].[acamostra]
ALTER COLUMN [Hora] [datetime] NULL;

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('acamostra') AND NAME = 'DataEntrega')
ALTER TABLE [dbo].[acamostra]
ADD [DataEntrega] [datetime] NULL;
GO

ALTER TABLE [dbo].[acamostra]
ALTER COLUMN [DataEntrega] [datetime] NULL;
GO

GO
IF OBJECT_ID('kits_proc') IS NULL
CREATE TABLE [dbo].[kits_proc](
	[Codigo] [int] NOT NULL,
	[Cod_Tabela] [int] NULL,
	[Cod_Procedimento] [varchar](20) NULL,
	[Procedimento] [varchar](255) NULL,
 CONSTRAINT [PK_kits_proc] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF OBJECT_ID('kits_proc_itens') IS NULL
CREATE TABLE [dbo].[kits_proc_itens](
	[Codigo] [int] NOT NULL,
	[Cod_Kit] [int] NULL,	
	[Cod_Item] [int] NULL,
	[Qtde] [float] NULL,
	[Tipo] [int] NULL,
 CONSTRAINT [PK_kits_proc_itens] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('kits_proc_itens') AND NAME = 'Descricao')
ALTER TABLE [dbo].[kits_proc_itens]
ADD [Descricao] [varchar](70) NULL;

/*
GO
UPDATE procdoc set TotalFilme = 0 where TotalFilme is null;


GO
UPDATE procdoc set Qtde = 1 where Qtde is null;
*/
GO
IF OBJECT_ID('SWConsultasProc') IS NULL
CREATE TABLE [dbo].[SWConsultasProc](
	[Cod_Consulta] [int] NOT NULL,
	[Cod_Procedim] [varchar](20) NOT NULL,
	[Cod_Usuario] [int] NULL,
	[Procedimento] [varchar](255) NULL,
	[Quantidade] [float] NULL,
	[Data] [datetime] NULL,
	[Hora] [datetime] NULL,
 CONSTRAINT [PK_SWConsultasProc] PRIMARY KEY CLUSTERED 
(
	[Cod_Consulta] ASC,
	[Cod_Procedim] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('SWConsultasProc') AND NAME = 'Procedimento')
ALTER TABLE [dbo].[SWConsultasProc]
ADD [Procedimento] [varchar](255) NULL;

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('convenio') AND NAME = 'Retorno')
ALTER TABLE [dbo].[convenio]
ADD [Retorno] [int] NULL;

GO
IF OBJECT_ID('agitemsapr') IS NULL
CREATE TABLE [dbo].[agitemsapr](
	[Cod_agenda] [int] NOT NULL,
	[Data] [datetime] NOT NULL,
	[Hora] [smallint] NOT NULL,
	[Sessao] [int] NULL,
	[Codigo do Tratamento] [text] NULL,
	[Condutas] [text] NULL,
	[Aparelhos] [varchar](255) NULL,
	[Observacao] [text] NULL,
 CONSTRAINT [agitemsapr_pk] PRIMARY KEY CLUSTERED 
(
	[Cod_agenda] ASC,
	[Data] ASC,
	[Hora] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];

GO
ALTER TABLE [dbo].[AgItemsApr]
ALTER COLUMN [Codigo do Tratamento] [text] NULL;

GO
ALTER TABLE [dbo].[AgItemsApr]
ALTER COLUMN [Condutas] [text] NULL;

GO
IF OBJECT_ID('tstuss') IS NULL
CREATE TABLE [dbo].[tstuss](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Cod_Procedimento] [varchar](15) NULL,
	[Grupo] [varchar](255) NULL,
	[Sub_Grupo] [varchar](255) NULL,
	[Procedimento] [varchar](255) NULL,
 CONSTRAINT [PK_tuss] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

GO
IF OBJECT_ID('tstuss_itens') IS NULL
CREATE TABLE [dbo].[tstuss_itens](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Cod_TUSS] [varchar](15) NULL,
	[Cod_Tabela] [int] NULL,
	[Descricao_Tabela] [varchar](50) NULL,
	[Cod_Procedimento] [varchar](15) NULL,
 CONSTRAINT [PK_tuss_itens] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('convenio') AND NAME = 'CodTUSS')
ALTER TABLE [dbo].[convenio]
ADD [CodTUSS] [bit] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc') AND NAME = 'CodTUSS')
ALTER TABLE [dbo].[procdoc]
ADD [CodTUSS] [varchar] (15) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsbrasindice') AND NAME = 'Valor')
ALTER TABLE [dbo].[tsbrasindice]
ADD [Valor] [float] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsbrasindice') AND NAME = 'Refresh')
ALTER TABLE [dbo].[tsbrasindice]
ADD [Refresh] [timestamp] NULL;
GO

ALTER TABLE [dbo].[cmquartos]
ALTER COLUMN [Numero] [varchar](50) NULL;
GO

ALTER TABLE [dbo].[cmleitos]
ALTER COLUMN [Numero] [varchar](50) NULL;
GO

ALTER TABLE [dbo].[cmhistorico]
ALTER COLUMN [Quarto] [varchar](50) NULL;
GO

ALTER TABLE [dbo].[cmhistorico]
ALTER COLUMN [Leito] [varchar](50) NULL;
GO


/* Corrige a falha do relatÃ³rio por convÃªnio nÃ£o abater os descontos lanÃ§ados */
/*
update procdoc set Qtde = 1 where Type = '-'
GO
*/

IF OBJECT_ID('procodonto') IS NULL
CREATE TABLE [dbo].[procodonto](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureNumber] [int] NOT NULL,
	[TipoDR] [varchar](1) NULL,
	[Dente_Regiao] [varchar](4) NULL,
	[Face] [varchar](5) NULL,
	[Qtde_US] [float] NULL,
	[Franquia] [float] NULL,
	[Autorizacao] [bit] NULL,
	[Refresh] [timestamp] NULL,
 CONSTRAINT [PK_procodonto] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cminternacao') AND NAME = 'Refresh')
ALTER TABLE [dbo].[cminternacao]
ADD [Refresh] [timestamp] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cminternacao') AND NAME = 'CID')
ALTER TABLE [dbo].[cminternacao]
ADD [CID] [varchar] (10) NULL;
GO

IF OBJECT_ID('cmavalespec') IS NULL
CREATE TABLE [dbo].[cmavalespec](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Cod_Cliente] [int] NULL,
	[Cod_Solicitante] [int] NULL,
        [Cod_Especialista] [int] NULL,
	[Parecer] [text] NULL,
	[Data] [datetime] NULL,
	[Hora] [datetime] NULL,
	[Refresh] [timestamp] NULL,
 CONSTRAINT [PK_cmavalespec] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
GO

IF OBJECT_ID('procaval') IS NULL
CREATE TABLE [dbo].[procaval](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[CodAval] [int] NULL,
	[PacCode] [int] NULL,
	[Data] [datetime] NULL,
	[Hora] [datetime] NULL,
	[Solicitante] [varchar](70) NULL,
	[Executante] [varchar](70) NULL,
	[Classificacao] [varchar](50) NULL,
	[Valor] [float] NULL,
	[Especialidade] [varchar](50) NULL,
        [Refresh] [timestamp] NULL,
 CONSTRAINT [PK_procaval] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmcelulas') AND NAME = 'Ala Medica')
ALTER TABLE dbo.cmcelulas 
ADD [Ala Medica] bit NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsguias') AND NAME = 'Cliente')
ALTER TABLE dbo.tsguias
ADD [Cliente] [varchar] (70) NULL;
/*
UPDATE TSGuias
SET TSGuias.Cliente  = (Select SWClientes.Nome from SWClientes where SWClientes.[CÃ³digo] = TSGuias.Cod_Cli)
*/
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procpact') AND NAME = 'Guia')
ALTER TABLE dbo.procpact
ADD [Guia] [bit] NULL CONSTRAINT [DF_procpact_Guia]  DEFAULT ((1));
/*UPDATE dbo.procpact set Guia = '1' where Guia is null*/
GO

IF OBJECT_ID('planos') IS NULL
CREATE TABLE [dbo].[planos](
	[Codigo] [int] NOT NULL,
	[Descricao] [varchar](50) NULL,
        [CodConvenio] [int] NULL,
	[Tabela] [int] NULL,
        [Excluido] [bit] NULL,
 CONSTRAINT [PK_planos] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'CodPlano')
ALTER TABLE [dbo].[swclientes]
ADD [CodPlano] [int] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsoutras') AND NAME = 'TipoGuia')
ALTER TABLE [dbo].[tsoutras]
ADD [TipoGuia] [int] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsoutras') AND NAME = 'Data_Guia')
ALTER TABLE [dbo].[tsoutras]
ADD [Data_Guia] [datetime] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('kits_proc_itens') AND NAME = 'CodMat')
ALTER TABLE [dbo].[kits_proc_itens]
ADD [CodMat] [int] NULL;
GO

ALTER TABLE [dbo].[kits_proc_itens]
ALTER COLUMN [Cod_Item] [varchar](20) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tssadt') AND NAME = 'Guia_Vinculada')
ALTER TABLE [dbo].[tssadt]
ADD [Guia_Vinculada] [int] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsresumo') AND NAME = 'Guia_Vinculada')
ALTER TABLE [dbo].[tsresumo]
ADD [Guia_Vinculada] [int] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsguias') AND NAME = 'Vinculada')
ALTER TABLE [dbo].[tsguias]
ADD [Vinculada] [bit] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('sistema') AND NAME = 'Bloqueado')
ALTER TABLE [dbo].[sistema]
ADD [Bloqueado] [bit] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('sistema') AND NAME = 'QualiSenha')
ALTER TABLE [dbo].[sistema]
ADD [QualiSenha] [smallint] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('sistema') AND NAME = 'Motivo')
ALTER TABLE [dbo].[sistema]
ADD [Motivo] [varchar] (75) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('sistema') AND NAME = 'UsRemovedor')
ALTER TABLE [dbo].[sistema]
ADD [UsRemovedor] [varchar] (50) NULL;
GO

IF OBJECT_ID('tilogs') IS NULL
CREATE TABLE [dbo].[tilogs](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Cod_Usuario] [int] NULL,
	[Data] [datetime] NULL,
	[Hora] [datetime] NULL,
	[Funcao] [varchar](100) NULL,
	[Descricao] [text] NULL,
	[CodigoAux] [varchar](50) NULL,
        [Refresh] [timestamp] NULL,
 CONSTRAINT [tilogs_pk] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
GO

IF OBJECT_ID('mtempresas') IS NULL
CREATE TABLE [dbo].[mtempresas](
	[Codigo] [int] NOT NULL,
	[CodMedico] [int] NULL,
	[RazaoSocial] [varchar](45) NULL,
	[Endereco] [varchar](70) NULL,
	[Bairro] [varchar](70) NULL,
	[Cidade] [varchar](70) NULL,
	[Estado] [varchar](2) NULL,
	[CEP] [varchar](10) NULL,
	[Tipo 1] [varchar](1) NULL,
	[Tipo 2] [varchar](1) NULL,
	[Telefone 1] [varchar](16) NULL,
	[Telefone 2] [varchar](16) NULL,
	[CNPJ] [varchar](18) NULL,
	[IE] [varchar](15) NULL,
	[Atividade] [varchar](100) NULL,
	[E-Mail] [varchar](70) NULL,
	[Observacoes] [text] NULL,
	[CNAE] [varchar](15) NULL,
	[VinculoEmpregativo] [bit] NULL,
	[Ativa] [bit] NULL
 CONSTRAINT [mtempresas_pk] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('mtempresas') AND NAME = 'Ativa')
ALTER TABLE [dbo].[mtempresas] ADD [Ativa] [bit] NULL
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('mtempresas') AND NAME = 'Regiao')
ALTER TABLE [dbo].[mtempresas] ADD [Regiao] [varchar](70) NULL
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('mtempresas') AND NAME = 'Status')
ALTER TABLE [dbo].[mtempresas] ADD [Status] [int] NULL
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('mtempresas') AND NAME = 'Serial')
ALTER TABLE [dbo].[mtempresas] ADD [Serial] [varchar](50) NULL
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('TSResumo') AND NAME = 'Num_Obito')
ALTER TABLE [dbo].[TSResumo]
ADD [Num_Obito] [bigint] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('Tables') AND NAME = 'TransMatMed')
ALTER TABLE [dbo].[Tables]
ADD [TransMatMed] [bit] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procpact') AND NAME = 'ISS')
ALTER TABLE [dbo].[procpact]
ADD [ISS] [bit] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procpact') AND NAME = 'ValorISS')
ALTER TABLE [dbo].[procpact]
ADD [ValorISS] [varchar](5) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'CBO')
ALTER TABLE [dbo].[cmmedicos]
ADD [CBO] [varchar](15) NULL;
GO

ALTER TABLE [dbo].[tsbrasindice]
ALTER COLUMN [Apresentacao] [varchar](255) NULL;
GO

ALTER TABLE [dbo].[tsbrasindice]
ALTER COLUMN [Descricao] [varchar](255) NULL;
GO

ALTER TABLE [dbo].[tsbrasindice]
ALTER COLUMN [Laboratorio] [varchar](255) NULL;
GO

ALTER TABLE [dbo].[tsbrasindice]
ALTER COLUMN [Brasindice] [varchar](255) NULL;
GO

IF OBJECT_ID('plsetor') IS NULL
CREATE TABLE [dbo].[plsetor](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Codigo de Controle] [int] NULL,
	[Setor] [varchar](50) NULL,
	[Controle] [bit] NULL,
	[Impressora] [varchar](100) NULL,
	[ContaContabil] [varchar](10) NULL,
 CONSTRAINT [plsetor_pk] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procpact') AND NAME = 'Aberto')
ALTER TABLE [dbo].[procpact]
ADD [Aberto] [bit] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'Excluido')
ALTER TABLE [dbo].[cmmedicos]
ADD [Excluido] [bit] NULL;

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMMEDICOS') AND NAME = 'NIT')
ALTER TABLE [dbo].[CMMEDICOS]
ADD [NIT] [varchar] (50) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMMEDICOS') AND NAME = 'CARGO')
ALTER TABLE [dbo].[CMMEDICOS]
ADD [CARGO] [varchar] (70) NULL;
GO

IF OBJECT_ID('cmmedicos_cbos') IS NULL
CREATE TABLE [dbo].[cmmedicos_cbos](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Cod_Medico] [int] NULL,
	[CBOS] [varchar](15) NULL,
	[Descricao] [varchar](70) NULL,
 CONSTRAINT [PK_cmmedicos_cbos] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

IF EXISTS (SELECT * FROM sys.views WHERE Name = 'VWClientes')
BEGIN
 DROP VIEW VWClientes
END
GO

CREATE VIEW dbo.VWClientes
AS
SELECT * FROM swclientes WHERE Apagado = '0'
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tssadt') AND NAME = 'Acidente')
ALTER TABLE [dbo].[tssadt]
ADD [Acidente] [int] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmunimed') AND NAME = 'CodControle')
ALTER TABLE [dbo].[cmunimed]
ADD [CodControle] [int] IDENTITY(1,1) NOT NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procpact') AND NAME = 'PercentClinica')
ALTER TABLE [dbo].[procpact]
ADD [PercentClinica] [float] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Unit')
ALTER TABLE [dbo].[procdoc]
ADD [Unit] [varchar] (3) NULL;
GO

ALTER TABLE [dbo].[tssadtprof]
ALTER COLUMN [Num_Conselho_Solic] [varchar] (15) NULL;
GO

ALTER TABLE [dbo].[tssadtprof]
ALTER COLUMN [Num_Conselho_Exec] [varchar] (15) NULL;
GO


/* Insere novos valores na tabela dominio referente ao padrÃ£o 2.02.02 do tiss */
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '05' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'05','Tabelas (2.02.02)','Tabela Brasindice') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '06' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'06','Tabelas (2.02.02)','ClassificaÃ§Ã£o Brasileira Hierarquizada de Procedimentos MÃ©dicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '07' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'07','Tabelas (2.02.02)','Tabela CIEFAS 93') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '08' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'08','Tabelas (2.02.02)','Tabela CIEFAS 2000') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '09' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'09','Tabelas (2.02.02)','Rol de procedimentos ANS') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '10' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'10','Tabelas (2.02.02)','Tabela de procedimentos ambulatoriais SUS') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '11' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'11','Tabelas (2.02.02)','Tabela de procedimentos hospitalares SUS') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '12' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'12','Tabelas (2.02.02)','Tabela SIMPRO') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '13' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'13','Tabelas (2.02.02)','Tabela TUNEP') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '14' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'14','Tabelas (2.02.02)','Tabela VRPO') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '15' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'15','Tabelas (2.02.02)','Tabela de IntercÃ¢mbio Sistema Uniodonto') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '16' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'16','Tabelas (2.02.02)','TUSS - Procedimentos MÃ©dicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '17' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'17','Tabelas (2.02.02)','TUSS - Procedimentos OdontolÃ³gicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '18' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'18','Tabelas (2.02.02)','TUSS - Taxas Hospitalares') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '19' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'19','Tabelas (2.02.02)','TUSS - Materiais') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '20' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'20','Tabelas (2.02.02)','TUSS - Medicamentos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '21' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'21','Tabelas (2.02.02)','TUSS - Outras especialidades') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '91' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'91','Tabelas (2.02.02)','Tabela provisÃ³ria TUSS') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '92' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'92','Tabelas (2.02.02)','Tabela provisÃ³ria TUSS - Procedimentos OdontolÃ³gicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '93' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'93','Tabelas (2.02.02)','Tabela provisÃ³ria TUSS - Procedimentos MÃ©dicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '95' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'95','Tabelas (2.02.02)','Tabela prÃ³pria materiais') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '96' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'96','Tabelas (2.02.02)','Tabela prÃ³pria medicamentos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '97' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'97','Tabelas (2.02.02)','Tabela prÃ³pria taxas hospitalares') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '98' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'98','Tabelas (2.02.02)','Tabela prÃ³pria pacotes') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '99' AND Descricao_Tipo  = 'Tabelas (2.02.02)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'99','Tabelas (2.02.02)','Tabela prÃ³pria gases medicinais')

/* Insere novos valores na tabela dominio referente ao padrÃ£o 2.02.03 do tiss */
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '05' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'05','Tabelas (2.02.03)','Tabela Brasindice') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '12' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'12','Tabelas (2.02.03)','Tabela SIMPRO') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '13' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'13','Tabelas (2.02.03)','Tabela TUNEP') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '14' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'14','Tabelas (2.02.03)','Tabela VRPO') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '15' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'15','Tabelas (2.02.03)','Tabela de IntercÃ¢mbio Sistema Uniodonto') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '16' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'16','Tabelas (2.02.03)','TUSS - Procedimentos MÃ©dicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '17' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'17','Tabelas (2.02.03)','TUSS - Procedimentos OdontolÃ³gicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '18' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'18','Tabelas (2.02.03)','TUSS - Taxas hospitalares, diÃ¡rias e gases medicinais') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '19' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'19','Tabelas (2.02.03)','TUSS - Materiais') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '20' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'20','Tabelas (2.02.03)','TUSS - Medicamentos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '21' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'21','Tabelas (2.02.03)','TUSS - Outras Ã¡reas da saÃºde') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '89' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'89','Tabelas (2.02.03)','Tabela PrÃ³pria Procedimentos nÃ£o mÃ©dicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '90' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'90','Tabelas (2.02.03)','Tabela PrÃ³pria Pacote OdontolÃ³gico') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '95' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'95','Tabelas (2.02.03)','Tabela prÃ³pria materiais') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '96' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'96','Tabelas (2.02.03)','Tabela prÃ³pria medicamentos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '97' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'97','Tabelas (2.02.03)','Tabela prÃ³pria taxas hospitalares') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '98' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'98','Tabelas (2.02.03)','Tabela PrÃ³pria de Pacotes Procedimentos MÃ©dicos') 
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '99' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'99','Tabelas (2.02.03)','Tabela prÃ³pria gases medicinais')
IF NOT EXISTS (SELECT * FROM dbo.tsdominio WHERE Codigo = '00' AND Descricao_Tipo  = 'Tabelas (2.02.03)') 
INSERT INTO dbo.tsdominio (Tipo,Codigo,Descricao_Tipo,Descricao) VALUES (4,'00','Tabelas (2.02.03)','Outras Tabelas')

IF OBJECT_ID('cmmapa_tnumm') IS NULL
CREATE TABLE [dbo].[cmmapa_tnumm](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Tabela] [int] NULL,
	[Codigo_Item] [varchar](20) NULL,
	[Codigo_TNUMM] [varchar](20) NULL,
        [DV] [int] NULL,
        [Descricao] [varchar](100) NULL,
 CONSTRAINT [PK_cmmapa_tnumm] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

IF OBJECT_ID('tsagrupar') IS NULL
CREATE TABLE [dbo].[tsagrupar](
	[Cod_Convenio] [int] NOT NULL,
	[Tipo] [int] NOT NULL,
	[Descricao] [varchar](30) NULL,
	[Codigo] [varchar](10) NULL,
 CONSTRAINT [PK_tsagrupar] PRIMARY KEY CLUSTERED 
(
	[Cod_Convenio] ASC,
	[Tipo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[cmunimed]
ALTER COLUMN [Descricao] [varchar](255) NULL;
GO

ALTER TABLE [dbo].[cmunimed]
ALTER COLUMN [Comercial] [varchar](255) NULL;
GO

ALTER TABLE [dbo].[cmmapa_tnumm]
ALTER COLUMN [Descricao] [varchar](255) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmapa_tnumm') AND NAME = 'Comercial')
ALTER TABLE [dbo].[cmmapa_tnumm]
ADD [Comercial] [varchar](255) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmapa_tnumm') AND NAME = 'Campo_OD')
ALTER TABLE [dbo].[cmmapa_tnumm]
ADD [Campo_OD] [int] NULL;
GO

update cmmapa_tnumm
set Campo_OD = '1' where Campo_OD is null

update procpact set 
procpact.Code = procdoc.PacCode
from procpact, procdoc
where 
procpact.ProcedureNumber = procdoc.ProcedureNumber and
procpact.Code is null


IF OBJECT_ID('tstuss_depara') IS NULL
CREATE TABLE [dbo].[tstuss_depara](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Amb1990] [varchar](15) NULL,
	[Amb1992] [varchar](15) NULL,
	[Lpm1996] [varchar](15) NULL,
	[Cbhpm] [varchar](15) NULL,
	[Tuss] [varchar](15) NULL,
	[Descricao] [varchar](255) NULL,
 CONSTRAINT [PK_tstuss_depara] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS 
WHERE ID = OBJECT_ID('procpact') AND Name = 'CodContaReceber')
BEGIN
   ALTER TABLE [dbo].[procpact] ADD [CodContaReceber] int NULL;
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procpact') AND NAME = 'CodPact')
ALTER TABLE [dbo].[procpact]
ADD [CodPact] [int] NULL;
GO

/****** tsmenus ******/
IF OBJECT_ID('tsmenus') IS NULL
CREATE TABLE [dbo].[tsmenus](
	[Codigo] [int] NOT NULL,
	[Descricao] [varchar](50) NULL,
 CONSTRAINT [PK_tsmenus] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO


/****** TSMenuNiveis ******/
IF OBJECT_ID('TSMenuNiveis') IS NULL
CREATE TABLE [dbo].[TSMenuNiveis](
	[Cod_Menu] [int] NOT NULL,
	[Nivel] [varchar](1) NOT NULL,
	[Botao] [bit] DEFAULT(0) NULL,
	[Atalho] [varchar](20) NULL,
 CONSTRAINT [PK_TSMenuNiveis] PRIMARY KEY CLUSTERED 
(
	[Cod_Menu] ASC,
	[Nivel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 100 AND Descricao = 'ConfiguraÃ§Ãµes' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(100,'ConfiguraÃ§Ãµes')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(100,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(100,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 101 AND Descricao = 'ConfiguraÃ§Ã£o da &Impressora...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(101,'ConfiguraÃ§Ã£o da &Impressora...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(101,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(101,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 102 AND Descricao = 'Co&nfiguraÃ§Ã£o do RelatÃ³rio...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(102,'Co&nfiguraÃ§Ã£o do RelatÃ³rio...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(102,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(102,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 103 AND Descricao = 'Con&figuraÃ§Ã£o do Recibo' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(103,'Con&figuraÃ§Ã£o do Recibo')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(103,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(103,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 104 AND Descricao = 'ConfiguraÃ§Ã£o da &Internet' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(104,'ConfiguraÃ§Ã£o da &Internet')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(104,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 105 AND Descricao = '&Mala Direta' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(105,'&Mala Direta')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(105,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 106 AND Descricao = 'ConfiguraÃ§Ã£o do &Ambiente ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(106,'ConfiguraÃ§Ã£o do &Ambiente ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(106,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(106,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 107 AND Descricao = 'IdentificaÃ§Ã£o da &Entidade' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(107,'IdentificaÃ§Ã£o da &Entidade')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(107,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 108 AND Descricao = 'ConvÃªnios' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(108,'ConvÃªnios')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(108,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 109 AND Descricao = 'Empresas' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(109,'Empresas')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(109,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(109,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 110 ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(110,'Cadastro de &MÃ©dicos (Prestadores)')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(110,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 111 ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(111,'&Valor Procedimento / MÃ©dico')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(111,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 112 AND Descricao = '&Profissionais dos Setores' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(112,'&Profissionais dos Setores')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(112,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 113 AND Descricao = 'ConfiguraÃ§Ã£o de &UsuÃ¡rios ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(113,'ConfiguraÃ§Ã£o de &UsuÃ¡rios ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(113,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 114 AND Descricao = 'Cadastro de &UsuÃ¡rios' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(114,'Cadastro de &UsuÃ¡rios')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(114,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 115 AND Descricao = 'ConfiguraÃ§Ã£o de NÃ­veis' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(115,'ConfiguraÃ§Ã£o de NÃ­veis')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(115,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 198 AND Descricao = 'Logoff' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(198,'Logoff')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(198,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(198,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 199 AND Descricao = 'Sair' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(199,'Sair')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(199,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(199,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 200 AND Descricao = '&Tabelas' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(200,'&Tabelas')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(200,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 201 AND Descricao = '&Nova ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(201,'&Nova ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(201,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 202 AND Descricao = '&Abrir ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(202,'&Abrir ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(202,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 203 AND Descricao = 'Apaga&r ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(203,'Apaga&r ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(203,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 204 AND Descricao = 'Tabela &TUSS' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(204,'Tabela &TUSS')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(204,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 205 AND Descricao = 'TUSS - &de para' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(205,'TUSS - &de para')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(205,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 206 AND Descricao = 'Tabela &Unimed (TNUMM)' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(206,'Tabela &Unimed (TNUMM)')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(206,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 207 AND Descricao = 'Tabela &SIMPRO' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(207,'Tabela &SIMPRO')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(207,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 208 AND Descricao = 'BrasÃndice' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(208,'BrasÃndice')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(208,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 300 AND Descricao = 'Clie&ntes' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(300,'Clie&ntes')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(300,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(300,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 301 AND Descricao = '&ManutenÃ§Ã£o do Cadastro' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(301,'&ManutenÃ§Ã£o do Cadastro')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(301,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(301,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 302 AND Descricao = '&Pesquisa Geral' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(302,'&Pesquisa Geral')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(302,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(302,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 303 AND Descricao = '&Clientes Apagados' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(303,'&Clientes Apagados')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(303,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(303,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 400 AND Descricao = '&LanÃ§amentos' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(400,'&LanÃ§amentos')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(400,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(400,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 401 AND Descricao = '&Realiza LanÃ§amento ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(401,'&Realiza LanÃ§amento ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(401,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(401,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 402 AND Descricao = '&MantÃ©m LanÃ§amentos' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(402,'&MantÃ©m LanÃ§amentos')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(402,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(402,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 403 AND Descricao = 'ManutenÃ§Ã£o de &Lotes ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(403,'ManutenÃ§Ã£o de &Lotes ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(403,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 404 AND Descricao = 'LanÃ§amento de &Consultas ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(404,'LanÃ§amento de &Consultas ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(404,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(404,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 405 AND Descricao = 'LanÃ§amento de &Procedimentos MÃ©dicos ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(405,'LanÃ§amento de &Procedimentos MÃ©dicos ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(405,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(405,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 406 AND Descricao = 'LanÃ§amento de AvaliaÃ§Ã£o E&specialista' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(406,'LanÃ§amento de AvaliaÃ§Ã£o E&specialista')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(406,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 407 AND Descricao = '&Glosas ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(407,'&Glosas ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(407,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(407,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 408 AND Descricao = 'Co&ntrole de Guias Pendentes' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(408,'Co&ntrole de Guias Pendentes')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(408,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 409 AND Descricao = '&Emitir Recibo' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(409,'&Emitir Recibo')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(409,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(409,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 410 AND Descricao = '&OrÃ§amento de Procedimentos ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(410,'&OrÃ§amento de Procedimentos ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(410,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(410,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 411 AND Descricao = 'Mapa de &AssociaÃ§Ãµes' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(411,'Mapa de &AssociaÃ§Ãµes')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(411,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(411,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 500 AND Descricao = 'TI&SS' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(500,'TI&SS')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(500,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(500,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 501 AND Descricao = '&Gerar Guias ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(501,'&Gerar Guias ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(501,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(501,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 502 AND Descricao = '&Rever Guias ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(502,'&Rever Guias ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(502,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(502,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 503 AND Descricao = 'Gerar &XML ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(503,'Gerar &XML ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(503,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(503,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 504 AND Descricao = 'Rever &Lotes XML ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(504,'Rever &Lotes XML ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(504,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(504,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 505 AND Descricao = '&Verificar Elegibilidade' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(505,'&Verificar Elegibilidade')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(505,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 506 AND Descricao = 'R&elatÃ³rio de Guias ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(506,'R&elatÃ³rio de Guias ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(506,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(506,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 507 AND Descricao = '&ConfiguraÃ§Ãµes' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(507,'&ConfiguraÃ§Ãµes')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(507,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 600 AND Descricao = '&RelatÃ³rios' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(600,'&RelatÃ³rios')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(600,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 601 AND Descricao = 'LanÃ§amentos por &ConvÃªnio ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(601,'LanÃ§amentos por &ConvÃªnio ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(601,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 602 AND Descricao = 'ConvÃªnios - por grupo de procedimentos ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(602,'ConvÃªnios - por grupo de procedimentos ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(602,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 603 AND Descricao = 'LanÃ§amentos por &Empresas ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(603,'LanÃ§amentos por &Empresas ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(603,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 604 ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(604,'LanÃ§amentos por &MÃ©dico ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(604,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 605 ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(605,'MÃ©dicos - por grupo de procedimentos ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(605,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 606 AND Descricao = 'Repasse de &Procedimentos ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(606,'Repasse de &Procedimentos ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(606,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 607 AND Descricao = '&LanÃ§amentos por Cliente ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(607,'&LanÃ§amentos por Cliente ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(607,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 608 AND Descricao = 'Conta &Hospitalar ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(608,'Conta &Hospitalar ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(608,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 609 AND Descricao = 'L&anÃ§amentos por Lote ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(609,'L&anÃ§amentos por Lote ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(609,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 610 AND Descricao = 'RelatÃ³rio de &Glosas ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(610,'RelatÃ³rio de &Glosas ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(610,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 611 AND Descricao = 'Glosas &Recuperadas ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(611,'Glosas &Recuperadas ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(611,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 612 AND Descricao = '&Faturamento por PerÃ­odo' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(612,'&Faturamento por PerÃ­odo')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(612,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 613 AND Descricao = 'Movimento de Cai&xa ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(613,'Movimento de Cai&xa ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(613,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 614 AND Descricao = 'Lista de &Internados ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(614,'Lista de &Internados ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(614,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 615 AND Descricao = 'Mapa de A&ssociaÃ§Ã£o' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(615,'Mapa de A&ssociaÃ§Ã£o')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(615,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 616 AND Descricao = 'Controle de Acessos (A&uditoria Interna) ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(616,'Controle de Acessos (A&uditoria Interna) ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(616,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 700 AND Descricao = '&GrÃ¡ficos' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(700,'&GrÃ¡ficos')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(700,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 701 AND Descricao = 'LanÃ§amentos por ConvÃªnio ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(701,'LanÃ§amentos por ConvÃªnio ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(701,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 702 ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(702,'LanÃ§amentos por MÃ©dicos ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(702,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 703 AND Descricao = 'MovimentaÃ§Ã£o no PerÃ­odo ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(703,'MovimentaÃ§Ã£o no PerÃ­odo ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(703,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 800 AND Descricao = 'S&US' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(800,'S&US')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(800,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(800,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 801 AND Descricao = '&Tabela de Procedimentos' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(801,'&Tabela de Procedimentos')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(801,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(801,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 802 AND Descricao = '&ConfiguraÃ§Ã£o' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(802,'&ConfiguraÃ§Ã£o')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(802,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(802,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 803 AND Descricao = '&AIH' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(803,'&AIH')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(803,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(803,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 804 AND Descricao = '&BPA' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(804,'&BPA')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(804,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(804,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 805 AND Descricao = 'A&PAC' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(805,'A&PAC')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(805,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(805,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 806 AND Descricao = 'R&elatÃ³rios' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(806,'R&elatÃ³rios')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(806,'A',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 900 AND Descricao = '&AcessÃ³rios' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(900,'&AcessÃ³rios')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(900,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(900,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 901 AND Descricao = 'ConPaRe - Contas a Pagar e a Receber' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(901,'ConPaRe - Contas a Pagar e a Receber')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(901,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(901,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 902 AND Descricao = '&Indoor WEB' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(902,'&Indoor WEB')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(902,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(902,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 903 AND Descricao = '&Calculadora' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(903,'&Calculadora')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(903,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(903,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 904 AND Descricao = 'Live &Update' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(904,'Live &Update')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(904,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(904,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 905 AND Descricao = '&Agenda de Compromissos' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(905,'&Agenda de Compromissos')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(905,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(905,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 906 AND Descricao = '&Sala de Espera Virtual' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(906,'&Sala de Espera Virtual')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(906,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(906,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 907 AND Descricao = 'CÃ³pia de SeguranÃ§a' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(907,'CÃ³pia de SeguranÃ§a')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(907,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(907,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 1000 AND Descricao = '&Janelas' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(1000,'&Janelas')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1000,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1000,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 1001 AND Descricao = '&Cascata' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(1001,'&Cascata')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1001,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1001,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 1002 AND Descricao = '&Lado a Lado' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(1002,'&Lado a Lado')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1002,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1002,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 1003 AND Descricao = '&Organizar Ãcones' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(1003,'&Organizar Ãcones')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1003,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1003,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 1004 AND Descricao = '&Fechar todas' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(1004,'&Fechar todas')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1004,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(1004,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 10000 AND Descricao = '&?' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(10000,'&?')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(10000,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(10000,'F',1,'')
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 10001 AND Descricao = '&CrÃ©ditos ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(10001,'&CrÃ©ditos ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(10001,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(10001,'F',1,'')
END
GO

/* Story 17.4 - JÃºlio Magaldi */
IF OBJECT_ID('tsguias_internas') IS NULL
CREATE TABLE [dbo].[tsguias_internas](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureNumber] [int] NULL,
	[Protocolo] [varchar](70) NULL,
	[Observacoes] [text] NULL,
 CONSTRAINT [PK_tsguias_internas] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

/* Story 17.4 - JÃºlio Magaldi */
IF OBJECT_ID('tsproc_guia') IS NULL
CREATE TABLE [dbo].[tsproc_guia](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Cod_Guia_Interna] [int] NULL,
	[Cod_Proc] [varchar](15) NULL,
	[Procedimento] [varchar](255) NULL,
	[Valor_Unit] [float] NULL,
	[Qtde] [int] NULL,
	[Valor_Total] [float] NULL,
 CONSTRAINT [PK_tsproc_guia] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/* Story 17.4 - JÃºlio Magaldi */
IF( SELECT count(*) FROM TSMenus WHERE Codigo = 116 AND Descricao = 'Cadastro de &LaboratÃ³rios' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(116,'Cadastro de &LaboratÃ³rios')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(116,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(116,'F',1,'')
END
GO

/* Story 17.4 - JÃºlio Magaldi */
IF OBJECT_ID('tslaboratorios') IS NULL
CREATE TABLE [dbo].[tslaboratorios](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Nome] [varchar](70) NULL,
	[Endereco] [varchar](70) NULL,
	[Bairro] [varchar](70) NULL,
	[Cidade] [varchar](70) NULL,
	[CEP] [varchar](20) NULL,
	[UF] [varchar](2) NULL,
	[Telefone] [varchar](20) NULL,
	[Email] [varchar](70) NULL,
        [Observacoes] [text] NULL, 
        [Apagado] [bit] NULL,
 CONSTRAINT [PK_tslaboratorios] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/* Story 17.4 - JÃºlio Magaldi */
IF OBJECT_ID('tsproc_lab') IS NULL
CREATE TABLE [dbo].[tsproc_lab](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Cod_Lab] [int] NULL,
	[Cod_Tabela] [int] NULL,
	[Cod_Proc] [varchar](20) NULL,
	[Procedimento] [varchar](255) NULL,
 CONSTRAINT [PK_tsproc_lab] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/* Story 17.4 - JÃºlio Magaldi */
IF OBJECT_ID('tspagto_guia') IS NULL
CREATE TABLE [dbo].[tspagto_guia](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[ProcedureNumber] [int] NULL,
	[Valor_Atendimento] [float] NULL,
	[Valor_Guia] [float] NULL,
	[Desconto] [float] NULL,
	[Total_Pagar] [float] NULL,
	[Forma_Pagto] [varchar](50) NULL,
 CONSTRAINT [PK_tspagto_guia] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

/* Story 17.4 - JÃºlio Magaldi */
IF( SELECT count(*) FROM TSMenus WHERE Codigo = 617 AND Descricao = 'Controle de Caixa Interno' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(617,'Controle de Caixa Interno')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(617,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(617,'F',1,'')
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMMEDICOS') AND NAME = 'NIT')
ALTER TABLE [dbo].[cmmedicos]
ADD [NIT] [varchar] (50) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('CMMEDICOS') AND NAME = 'CARGO')
ALTER TABLE [dbo].[cmmedicos]
ADD [CARGO] [varchar] (70) NULL;
GO

/* Story 28.6 - JÃºlio Magaldi */
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procodonto') AND NAME = 'CAO')
ALTER TABLE [dbo].[procodonto]
ADD [CAO] [varchar](20) NULL;

/* Story 28.6 - JÃºlio Magaldi */
ALTER TABLE [dbo].[procodonto]
ALTER COLUMN [Dente_Regiao] [varchar](30) NULL;

/* Story 38.27 - JÃºlio Magaldi */
IF( SELECT count(*) FROM TSMenus WHERE Codigo = 508 AND Descricao = 'Importar arquivo de guias ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(508,'Importar arquivo de guias ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(508,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(508,'F',1,'')
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc') AND NAME = 'CodPact')
ALTER TABLE [dbo].[procdoc]
ADD [CodPact] [int] NULL;
GO

/* Story 42.18 - JÃºlio Magaldi */
UPDATE cmmedicos SET Excluido = '0'
WHERE Excluido IS NULL
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Importado')
BEGIN
	ALTER TABLE [dbo].[SWClientes] ADD [Importado] bit DEFAULT 0
END
GO

/* Story 43.16 - JÃºlio Magaldi */
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsodonto') AND NAME = 'Guia_Vinculada')
ALTER TABLE [dbo].[tsodonto]
ADD [Guia_Vinculada] [int] NULL;
GO

/* Story 43.16 - JÃºlio Magaldi */
ALTER TABLE [dbo].[tsodonto]
ALTER COLUMN [Tipo_Atendimento] [varchar](2) NULL;
GO

/* Story 46.12 - JÃºlio Magaldi */
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmmedicos') AND NAME = 'CNS')
ALTER TABLE [dbo].[cmmedicos]
ADD [CNS] [varchar](30) NULL;
GO

/* Story 47.1 - JÃºlio Magaldi */
IF( SELECT count(*) FROM TSMenus WHERE Codigo = 209 AND Descricao = 'Tabela TUSS - &Odontologia' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(209,'Tabela TUSS - &Odontologia')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(209,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(209,'F',1,'')
END
GO

/* Story 47.1 - JÃºlio Magaldi */
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tstuss') AND NAME = 'Odontologia')
ALTER TABLE [dbo].[tstuss]
ADD [Odontologia] [bit] NULL CONSTRAINT [DF_tstuss_Odontologia]  DEFAULT ((0));
GO

/* Story 47.1 - JÃºlio Magaldi */
IF( SELECT count(*) FROM tstuss WHERE Odontologia = '1' ) = 0 
BEGIN
insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000014','Condicionamento em Odontologia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000030','Consulta odontolÃ³gica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000049','Consulta odontolÃ³gica de UrgÃªncia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000057','Consulta odontolÃ³gica de UrgÃªncia 24 hs','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000065','Consulta odontolÃ³gica inicial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000073','Consulta odontolÃ³gica para avaliaÃ§Ã£o tÃ©cnica de auditoria','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000090','Consulta para TÃ©cnica de Clareamento DentÃ¡rio Caseiro','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000111','DiagnÃ³stico anatomopatolÃ³gico em citologia esfoliativa na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000138','DiagnÃ³stico anatomopatolÃ³gico em material de biÃ³psia na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000154','DiagnÃ³stico anatomopatolÃ³gico em peÃ§a cirÃºrgica na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000170','DiagnÃ³stico anatomopatolÃ³gico em punÃ§Ã£o na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000189','DiagnÃ³stico e planejamento para tratamento odontolÃ³gico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000197','DiagnÃ³stico e tratamento de estomatite herpÃ©tica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000200','DiagnÃ³stico e tratamento de estomatite por candidose','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000219','DiagnÃ³stico e tratamento de halitose','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000235','DiagnÃ³stico e tratamento de xerostomia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000243','DiagnÃ³stico por meio de enceramento','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000260','DiagnÃ³stico por meio de procedimentos laboratoriais','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000278','Fotografia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000294','Levantamento RadiogrÃ¡fico (Exame RadiodÃ´ntico)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000308','Modelos ortodÃ´nticos','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000324','Radiografia antero-posterior','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000340','Radiografia da ATM','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000367','Radiografia da mÃ£o e punho - carpal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000375','Radiografia interproximal - bite-wing','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000383','Radiografia oclusal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000405','Radiografia panorÃ¢mica de mandÃ­bula/maxila (ortopantomografia)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000413','Radiografia panorÃ¢mica de mandÃ­bula/maxila (ortopantomografia) com traÃ§ado cefalomÃ©trico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000421','Radiografia periapical','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000430','Radiografia pÃ³stero-anterior','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000456','Slide','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000472','Telerradiografia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000480','Telerradiografia com traÃ§ado cefalomÃ©trico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000510','Tomografia computadorizada por feixe cÃ´nico - cone beam','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000529','Tomografia convencional - linear ou multi-direcional','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('81000537','TraÃ§ado CefalomÃ©trico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000026','Acompanhamento de tratamento/procedimento cirÃºrgico em odontologia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000034','Alveoloplastia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000050','AmputaÃ§Ã£o radicular com obturaÃ§Ã£o retrÃ³grada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000069','AmputaÃ§Ã£o radicular sem obturaÃ§Ã£o retrÃ³grada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000077','Apicetomia birradiculares com obturaÃ§Ã£o retrÃ³grada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000085','Apicetomia birradiculares sem obturaÃ§Ã£o retrÃ³grada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000158','Apicetomia multirradiculares com obturaÃ§Ã£o retrÃ³grada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000166','Apicetomia multirradiculares sem obturaÃ§Ã£o retrÃ³grada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000174','Apicetomia unirradiculares com obturaÃ§Ã£o retrÃ³grada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000182','Apicetomia unirradiculares sem obturaÃ§Ã£o retrÃ³grada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000190','Aprofundamento/aumento de vestÃ­bulo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000212','Aumento de coroa clÃ­nica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000239','BiÃ³psia de boca','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000247','BiÃ³psia de glÃ¢ndula salivar','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000255','BiÃ³psia de lÃ¡bio','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000263','BiÃ³psia de lÃ­ngua','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000271','BiÃ³psia de mandÃ­bula','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000280','BiÃ³psia de maxila','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000298','Bridectomia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000301','Bridotomia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000336','Cirurgia odontolÃ³gica a retalho','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000344','Cirurgia odontolÃ³gica com aplicaÃ§Ã£o de aloenxertos','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000352','Cirurgia para exostose maxilar','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000360','Cirurgia para torus mandibular - bilateral','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000387','Cirurgia para torus mandibular - unilateral','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000395','Cirurgia para torus palatino','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000417','Cirurgia periodontal a retalho','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000441','Coleta de raspado em lesÃµes ou sÃ­tios especÃ­ficos da regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000468','Controle de hemorragia com aplicaÃ§Ã£o de agente hemostÃ¡tico em regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000484','Controle de hemorragia sem aplicaÃ§Ã£o de agente hemostÃ¡tico em regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000506','Controle pÃ³s-operatÃ³rio em odontologia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000522','Criocirurgia de neoplasias da regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000549','Crioterapia ou termoterapia em odontologia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000557','Cunha proximal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001022','IncisÃ£o e Drenagem extra-oral de abscesso, hematoma e/ou flegmÃ£o da regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001030','IncisÃ£o e Drenagem intra-oral de abscesso, hematoma e/ou flegmÃ£o da regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000581','Enxerto com osso autÃ³geno da linha oblÃ­qua','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000603','Enxerto com osso autÃ³geno do mento','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000620','Enxerto com osso liofilizado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000646','Enxerto conjuntivo subepitelial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000662','Enxerto gengival livre','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000689','Enxerto pediculado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000700','EstabilizaÃ§Ã£o de paciente por meio de contenÃ§Ã£o fÃ­sica e/ou mecÃ¢nica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000743','ExÃ©rese de lipoma na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000778','ExÃ©rese ou excisÃ£o de cÃ¡lculo salivar','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000786','ExÃ©rese ou excisÃ£o de cistos odontolÃ³gicos','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000794','ExÃ©rese ou excisÃ£o de mucocele','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000808','ExÃ©rese ou excisÃ£o de rÃ¢nula','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000816','Exodontia a retalho','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000832','Exodontia de permanente por indicaÃ§Ã£o ortodÃ´ntica/protÃ©tica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000859','Exodontia de raiz residual','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000875','Exodontia simples de permanente','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000883','Frenulectomia labial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000891','Frenulectomia lingual','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000905','Frenulotomia labial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000913','Frenulotomia lingual','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000921','Gengivectomia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000948','Gengivoplastia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000964','Implante ortodÃ´ntico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82000980','Implante Ã³sseo integrado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001006','Implante ZigomÃ¡tico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001049','Levantamento do seio maxilar com osso autÃ³geno','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001057','Levantamento do seio maxilar com osso homÃ³logo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001065','Levantamento do seio maxilar com osso liofilizado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001073','Odonto-secÃ§Ã£o','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001103','PunÃ§Ã£o aspirativa na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001120','PunÃ§Ã£o aspirativa orientada por imagem na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001138','Reabertura - colocaÃ§Ã£o de cicatrizador','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001154','ReconstruÃ§Ã£o de sulco gengivo-labial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001170','ReduÃ§Ã£o cruenta de fratura alvÃ©olo dentÃ¡ria','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001189','ReduÃ§Ã£o incruenta de fratura alvÃ©olo dentÃ¡ria','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001197','ReduÃ§Ã£o simples de luxaÃ§Ã£o de ArticulaÃ§Ã£o TÃªmporo-mandibular (ATM)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001219','ReeducaÃ§Ã£o e/ou reabilitaÃ§Ã£o de distÃºrbio buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001235','ReeducaÃ§Ã£o e/ou reabilitaÃ§Ã£o de sequela em traumatismo buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001243','RegeneraÃ§Ã£o tecidual guiada - RTG','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001251','Reimplante dentÃ¡rio com contenÃ§Ã£o','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001286','RemoÃ§Ã£o de dentes inclusos / impactados','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001294','RemoÃ§Ã£o de dentes semi-inclusos / impactados','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001308','RemoÃ§Ã£o de dreno extra-oral','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001316','RemoÃ§Ã£o de dreno intra-oral','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001324','RemoÃ§Ã£o de implante dentÃ¡rio nÃ£o Ã³sseo integrado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001332','RemoÃ§Ã£o de implante dentÃ¡rio Ã³sseo integrado no seio maxilar','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001367','RemoÃ§Ã£o de odontoma','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001375','RemoÃ§Ã£o de tamponamento nasal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001391','Retirada de corpo estranho oroantral ou oronasal da regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001413','Retirada de corpo estranho subcutÃ¢neo ou submucoso da regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001430','Retirada dos meios de fixaÃ§Ã£o da regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001448','SedaÃ§Ã£o consciente com Ã³xido nitroso e oxigÃªnio em odontologia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001456','SedaÃ§Ã£o medicamentosa ambulatorial em odontologia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001464','Sepultamento radicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001499','Sutura de ferida em regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001502','Tracionamento cirÃºrgico com finalidade ortodÃ´ntica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001510','Tratamento cirÃºrgico das fÃ­stulas buco nasal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001529','Tratamento cirÃºrgico das fÃ­stulas buco sinusal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001545','Tratamento cirÃºrgico de bridas constritivas da regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001588','Tratamento cirÃºrgico de hiperplasias de tecidos Ã³sseos/cartilaginosos na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001553','Tratamento cirÃºrgico de hiperplasias de tecidos moles na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001596','Tratamento cirÃºrgico de tumores benignos de tecidos Ã³sseos/cartilaginosos na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001618','Tratamento cirÃºrgico dos tumores benignos de tecidos moles na regiÃ£o buco-maxilo-facial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001634','Tratamento CirÃºrgico para tumores odontogÃªnicos benignos - sem reconstruÃ§Ã£o','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001642','Tratamento conservador de luxaÃ§Ã£o da articulaÃ§Ã£o tÃªmporo-mandibular - ATM','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001650','Tratamento de alveolite','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001669','Tratamento odontolÃ³gico regenerativo com enxerto de osso autÃ³geno','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001685','TunelizaÃ§Ã£o','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001707','Ulectomia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('82001715','Ulotomia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000020','Coroa de acetato em dente decÃ­duo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000046','Coroa de aÃ§o em dente decÃ­duo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000062','Coroa de policarbonato em dente decÃ­duo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000089','Exodontia simples de decÃ­duo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85000787','ImobilizaÃ§Ã£o dentÃ¡ria em dentes decÃ­duos','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000097','Mantenedor de espaÃ§o fixo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000100','Mantenedor de espaÃ§o removÃ­vel','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000127','Pulpotomia em dente decÃ­duo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000135','RestauraÃ§Ã£o atraumÃ¡tica em dente decÃ­duo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('83000151','Tratamento endodÃ´ntico em dente decÃ­duo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000015','Aparelho protetor bucal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000031','AplicaÃ§Ã£o de cariostÃ¡tico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000058','AplicaÃ§Ã£o de selante - tÃ©cnica invasiva','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000074','AplicaÃ§Ã£o de selante de fÃ³ssulas e fissuras','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000090','AplicaÃ§Ã£o tÃ³pica de flÃºor','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000112','AplicaÃ§Ã£o tÃ³pica de verniz fluoretado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000139','Atividade educativa em saÃºde bucal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000024','Atividade educativa para pais e/ou cuidadores','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000163','Controle de biofilme (placa bacteriana)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000171','Controle de cÃ¡rie incipiente','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000198','Profilaxia: polimento coronÃ¡rio','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000201','RemineralizaÃ§Ã£o','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000228','Teste de capacidade tampÃ£o da saliva','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000236','Teste de contagem microbiolÃ³gica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000244','Teste de fluxo salivar','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('84000252','Teste de PH salivar','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400017','Ajuste Oclusal por acrÃ©scimo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400025','Ajuste Oclusal por desgaste seletivo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100013','Capeamento pulpar direto','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200018','Clareamento de dente desvitalizado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100021','Clareamento dentÃ¡rio caseiro','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100030','Clareamento dentÃ¡rio de consultÃ³rio','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100048','Colagem de fragmentos dentÃ¡rios','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400033','Conserto em prÃ³tese parcial removÃ­vel (em consultÃ³rio e em laboratÃ³rio)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400041','Conserto em prÃ³tese parcial removÃ­vel (exclusivamente em consultÃ³rio)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400050','Conserto em prÃ³tese total (em consultÃ³rio e em laboratÃ³rio)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400068','Conserto em prÃ³tese total (exclusivamente em consultÃ³rio)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400076','Coroa provisÃ³ria com pino','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400084','Coroa provisÃ³ria sem pino','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500011','Coroa provisÃ³ria sobre implante','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500020','Coroa provisÃ³ria sobre implante com carga imediata','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400092','Coroa total acrÃ­lica prensada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400106','Coroa total em cerÃ¢mica pura','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400114','Coroa total em cerÃ´mero','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400122','Coroa total livre de metal (metalfree) sobre implante - cerÃ¢mica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400130','Coroa total livre de metal (metalfree) sobre implante - cerÃ´mero','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400149','Coroa total metÃ¡lica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400157','Coroa total metalo cerÃ¢mica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500038','Coroa total metalo cerÃ¢mica sobre implante','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400165','Coroa total metalo plÃ¡stica - cerÃ´mero','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400173','Coroa total metalo plÃ¡stica - resina acrÃ­lica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500046','Coroa total metalo plÃ¡stica sobre implante - cerÃ´mero','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500054','Coroa total metalo plÃ¡stica sobre implante - resina acrÃ­lica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100056','Curativo de demora em endodontia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85300012','DessensibilizaÃ§Ã£o dentÃ¡ria','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100064','Faceta direta em resina fotopolimerizÃ¡vel','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400181','Faceta em cerÃ¢mica pura','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400190','Faceta em cerÃ´mero','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500062','Guia cirÃºrgico para implante','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400203','Guia cirÃºrgico para prÃ³tese total imediata','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85300020','ImobilizaÃ§Ã£o dentÃ¡ria em dentes permanentes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500070','IntermediÃ¡rio protÃ©tico (para implantes)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500089','ManutenÃ§Ã£o de prÃ³tese sobre implantes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400211','NÃºcleo de preenchimento','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400220','NÃºcleo metÃ¡lico fundido','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400238','Onlay de Resina Indireta','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400246','Ãrtese miorrelaxante (placa oclusal estabilizadora)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400254','Ãrtese reposicionadora (placa oclusal reposicionadora)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500097','Overdenture barra clipe ou o''ring sobre dois implantes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500100','Overdenture barra clipe ou o''ring sobre quatro ou mais implantes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500119','Overdenture barra clipe ou o''ring sobre trÃªs implantes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400262','Pino prÃ© fabricado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100072','Placa de Acetato para Clareamento Caseiro','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400270','Placa oclusal resiliente','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200026','Preparo para nÃºcleo intrarradicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400289','PrÃ³tese fixa adesiva direta (provisÃ³ria)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400297','PrÃ³tese fixa adesiva em cerÃ´mero livre de metal (metal free)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400300','PrÃ³tese fixa adesiva indireta em metalo cerÃ¢mica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400319','PrÃ³tese fixa adesiva indireta em metalo plÃ¡stica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400327','PrÃ³tese parcial fixa em cerÃ´mero livre de metal (metal free)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400335','PrÃ³tese parcial fixa em metalo cerÃ¢mica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400343','PrÃ³tese parcial fixa em metalo plÃ¡stica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500127','PrÃ³tese parcial fixa implanto suportada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400351','PrÃ³tese parcial fixa In Ceran livre de metal (metal free)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400360','PrÃ³tese parcial fixa provisÃ³ria','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500135','PrÃ³tese parcial fixa provisÃ³ria em carga imediata','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400378','PrÃ³tese parcial removÃ­vel com encaixes de precisÃ£o ou de semi precisÃ£o','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400386','PrÃ³tese parcial removÃ­vel com grampos bilateral','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400394','PrÃ³tese parcial removÃ­vel provisÃ³ria em acrÃ­lico com ou sem grampos','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400408','PrÃ³tese total','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400416','PrÃ³tese total imediata','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400424','PrÃ³tese total incolor','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500143','Protocolo Branemark em carga imediata para 4 implantes - parte protÃ©tica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500151','Protocolo Branemark em carga imediata para 5 implantes - parte protÃ©tica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500160','Protocolo Branemark para 4 implantes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500178','Protocolo Branemark para 5 implantes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500186','Protocolo Branemark provisÃ³rio para 4 implantes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85500194','Protocolo Branemark provisÃ³rio para 5 implantes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400432','ProvisÃ³rio para Faceta','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400440','ProvisÃ³rio para Inlay/Onlay','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400459','ProvisÃ³rio para RestauraÃ§Ã£o metÃ¡lica fundida','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200034','Pulpectomia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200042','Pulpotomia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85300039','Raspagem sub-gengival/alisamento radicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85300047','Raspagem supra-gengival','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400467','RecimentaÃ§Ã£o de trabalhos protÃ©ticos','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400475','Reembasamento de coroa provisÃ³ria','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400483','Reembasamento de prÃ³tese total ou parcial - imediato (em consultÃ³rio)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400491','Reembasamento de prÃ³tese total ou parcial - mediato (em laboratÃ³rio)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200050','RemoÃ§Ã£o de corpo estranho intracanal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200069','RemoÃ§Ã£o de material obturador intracanal para retratamento endodÃ´ntico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200077','RemoÃ§Ã£o de nÃºcleo intrarradicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400505','RemoÃ§Ã£o de trabalho protÃ©tico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85300055','RemoÃ§Ã£o dos fatores de retenÃ§Ã£o do Biofilme Dental (Placa Bacteriana)','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100080','RestauraÃ§Ã£o atraumÃ¡tica em dente permanente','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100099','RestauraÃ§Ã£o de amÃ¡lgama  - 1 face','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100102','RestauraÃ§Ã£o de amÃ¡lgama - 2 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100110','RestauraÃ§Ã£o de amÃ¡lgama - 3 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100129','RestauraÃ§Ã£o de amÃ¡lgama - 4 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400513','RestauraÃ§Ã£o em cerÃ¢mica pura - inlay','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400521','RestauraÃ§Ã£o em cerÃ¢mica pura - onlay','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400548','RestauraÃ§Ã£o em cerÃ´mero - inlay','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400530','RestauraÃ§Ã£o em cerÃ´mero - onlay','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100137','RestauraÃ§Ã£o em ionÃ´mero de vidro - 1 face','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100145','RestauraÃ§Ã£o em ionÃ´mero de vidro - 2 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100153','RestauraÃ§Ã£o em ionÃ´mero de vidro - 3 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100161','RestauraÃ§Ã£o em ionÃ´mero de vidro - 4 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85400556','RestauraÃ§Ã£o metÃ¡lica fundida','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100196','RestauraÃ§Ã£o em resina fotopolimerizÃ¡vel  1 face','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100200','RestauraÃ§Ã£o em resina fotopolimerizÃ¡vel  2 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100218','RestauraÃ§Ã£o em resina fotopolimerizÃ¡vel  3 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100226','RestauraÃ§Ã£o em resina fotopolimerizÃ¡vel  4 faces','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100170','RestauraÃ§Ã£o em resina (indireta) - Inlay','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100188','RestauraÃ§Ã£o em resina (indireta) - Onlay','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200085','RestauraÃ§Ã£o temporÃ¡ria / tratamento expectante','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200093','Retratamento endodÃ´ntico birradicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200107','Retratamento endodÃ´ntico multirradicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200115','Retratamento endodÃ´ntico unirradicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85300063','Tratamento de abscesso periodontal agudo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85100234','Tratamento de fluorose - microabrasÃ£o','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85300071','Tratamento de gengivite necrosante aguda - GNA','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200123','Tratamento de perfuraÃ§Ã£o endodÃ´ntica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85300080','Tratamento de pericoronarite','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200131','Tratamento endodÃ´ndico de dente com rizogÃªnese incompleta','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200140','Tratamento endodÃ´ntico birradicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200158','Tratamento endodÃ´ntico multirradicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('85200166','Tratamento endodÃ´ntico unirradicular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000012','Aletas Gomes','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000020','Aparelho de Klammt','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000039','Aparelho de protraÃ§Ã£o mandibular -  APM','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000047','Aparelho de Thurow','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000055','Aparelho extra-bucal','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000063','Aparelho ortodÃ´ntico fixo estÃ©tico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000098','Aparelho ortodÃ´ntico fixo metÃ¡lico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000080','Aparelho ortodÃ´ntico fixo estÃ©tico parcial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000110','Aparelho ortodÃ´ntico fixo metÃ¡lico parcial','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000128','Aparelho removÃ­vel com alÃ§as bionator invertida ou de Escheler','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000136','APM - Aparelho de ProtraÃ§Ã£o Mandibular','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000144','Arco lingual','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000152','Barra transpalatina fixa','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000160','Barra transpalatina removÃ­vel','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000179','Bionator de Balters','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000187','Blocos geminados de Clark - twinblock','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000195','BotÃ£o de Nance','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000209','ContenÃ§Ã£o fixa - por arcada','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000225','Disjuntor palatino - Hirax','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000233','Disjuntor palatino - Macnamara','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000241','Distalizador com mola nitinol','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000250','Distalizador de Hilgers','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000268','Distalizador Distal Jet','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000276','Distalizador Pendulo/Pendex','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000284','Distalizador tipo Jones Jig','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000292','DocumentaÃ§Ã£o eletromiogrÃ¡fica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000306','Gianelly','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000314','Grade palatina fixa','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000322','Grade palatina removÃ­vel','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000330','Herbst encapsulado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000357','ManutenÃ§Ã£o de aparelho ortodÃ´ntico - aparelho fixo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000365','ManutenÃ§Ã£o de aparelho ortodÃ´ntico - aparelho ortopÃ©dico','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000373','ManutenÃ§Ã£o de aparelho ortodÃ´ntico - aparelho removÃ­vel','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000381','MÃ¡scara facial - Delaire e TraÃ§Ã£o Reversa','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000390','Mentoneira','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000403','Modelador elÃ¡stico de Bimler','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000411','Monobloco','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000420','ObtenÃ§Ã£o de modelos gnatostÃ¡ticos de Planas','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000438','Pistas diretas de Planas - superior e inferior','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000446','Pistas indiretas de Planas','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000454','Placa de distalizaÃ§Ã£o de molares','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000462','Placa de Hawley','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000470','Placa de Hawley - com torno expansor','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000489','Placa de mordida ortodÃ´ntica','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000497','Placa de Schwarz','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000500','Placa de verticalizaÃ§Ã£o de caninos','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000519','Placa dupla de Sanders','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000527','Placa encapsulada de MaurÃ­cio','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000535','Placa lÃ¡bio-ativa','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000543','Plano anterior fixo','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000551','Plano inclinado','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000560','QuadrihÃ©lice','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000578','Regulador de funÃ§Ã£o de Frankel','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000586','SimÃµes Network','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('86000594','Splinter','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000016','Atividade educativa em odontologia para pais e/ou cuidadores de pacientes com necessidades especiais','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000032','Condicionamento em odontologia para pacientes com necessidades especiais','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000040','Coroa de acetato em dente permanente','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000059','Coroa de aÃ§o em dente permanente','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000067','Coroa de policarbonato em dente permanente','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000148','EstabilizaÃ§Ã£o por meio de contenÃ§Ã£o fÃ­sica e/ou mecÃ¢nica em pacientes com necessidades especias em odontologia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000164','SedaÃ§Ã£o consciente com Ã³xido nitroso e oxigÃªnio em pacientes com necessidades especiais em odontologia','Odontologia','Odontologia',1)

insert into tstuss([Cod_Procedimento], [Procedimento], [Grupo], [Sub_Grupo], [Odontologia]) values('87000180','SedaÃ§Ã£o medicamentosa ambulatorial em pacientes com necessidades especiais em odontologia','Odontologia','Odontologia',1)
END
GO

/* Story 50.10 - JÃºlio Magaldi */
IF( SELECT count(*) FROM procdoc WHERE CodPact is null ) > 0 
BEGIN
  update procpact set 
  procpact.CodPact = convenio.Code
  from procpact, convenio
  where 
  procpact.Pact = convenio.Name
END
GO

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 210 AND Descricao = 'Tabela TU&NEP' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(210,'Tabela TU&NEP')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(210,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(210,'F',1,'')
END
GO

IF (SELECT count(*) FROM tssadtprof WHERE Tipo_Doc_Exec = 'CÃ³digo na ') > 0
BEGIN
  UPDATE tssadtprof SET Tipo_Doc_Exec = 0 WHERE Tipo_Doc_Exec = 'CÃ³digo na '
END

IF (SELECT count(*) FROM tssadtprof WHERE Tipo_Doc_Exec = 'CÃ³digo na Operadora') > 0
BEGIN
  UPDATE tssadtprof SET Tipo_Doc_Exec = 0 WHERE Tipo_Doc_Exec = 'CÃ³digo na Operadora'
END


IF (SELECT count(*) FROM tssadtprof WHERE Tipo_Doc_Exec = 'CPF') > 0
BEGIN
  UPDATE tssadtprof SET Tipo_Doc_Exec = 1 WHERE Tipo_Doc_Exec = 'CPF'
END

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('convenio') AND NAME = 'ISS')
ALTER TABLE [dbo].[convenio]
ADD [ISS] [float] NULL;
GO

/*******************************************************************************************************************/
-- Story: 82.16
-- Data: 05/06/2013
-- ResponsÃ¡vel: Bruno Portella SimÃ£o
/*******************************************************************************************************************/
 
IF OBJECT_ID('procpact_del') IS NULL
BEGIN
	CREATE TABLE [dbo].[procpact_del](
		[Codigo] [int] IDENTITY(1,1) NOT NULL,
		[ProcedureNumber] [int] NULL,
		[Code] [int] NULL,
		[CodCons] [int] NULL,
		[CodEmp] [int] NULL,
		[Name] [varchar](80) NULL,
		[ProcDate] [datetime] NULL,
		[ProcTime] [datetime] NULL,
		[CID] [varchar](25) NULL,
		[Pact] [varchar](50) NULL,
		[Doc] [varchar](25) NULL,
		[Register] [varchar](30) NULL,
		[Local] [varchar](40) NULL,
		[TCH] [float] NULL,
		[TReal] [float] NULL,
		[DReal] [float] NULL,
		[Recibo] [bit] NULL,
		[Recebido] [bit] NULL,
		[CH] [float] NULL,
		[Mes] [smallint] NULL,
		[Ano] [smallint] NULL,
		[Guia] [bit] NULL,
		[PercentClinica] [float] NULL,
		[Situacao] [varchar](10) NULL,
		[CodLote] [int] NULL,
		[Atendimento] [int] NULL,
		[Refresh] [timestamp] NULL,
		[ISS] [bit] NULL,
		[ValorISS] [varchar](5) NULL,
		[Aberto] [bit] NULL,
		[CodContaReceber] [int] NULL,
		[CodPact] [int] NULL,
	 CONSTRAINT [PK_procpact_del] PRIMARY KEY CLUSTERED 
	(
		[Codigo] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO
 
IF OBJECT_ID('procdoc_del') IS NULL
BEGIN
	CREATE TABLE [dbo].[procdoc_del](
		[Codigo] [int] IDENTITY(1,1) NOT NULL,
		[ProcedureNumber] [int] NULL,
		[UniqueCod] [int] NULL,
		[Type] [varchar](2) NULL,
		[PacCode] [int] NULL,
		[ProcDate] [datetime] NULL,
		[Code] [varchar](20) NULL,
		[ProcedureField] [varchar](255) NULL,
		[Qtde] [float] NULL,
		[Doctor] [varchar](40) NULL,
		[ProcValue] [float] NULL,
		[CHValue] [float] NULL,
		[CodTipo] [int] NULL,
		[Recebido] [bit] NULL,
		[Laboratorio] [varchar](70) NULL,
		[TotalFilme] [float] NULL,
		[Data] [datetime] NULL,
		[Hora] [datetime] NULL,
		[Usuario] [varchar](70) NULL,
		[Checado] [bit] NULL,
		[Unit] [varchar](3) NULL,
		[ProcTime] [datetime] NULL,
		[ProcEndTime] [datetime] NULL,
		[Solicitante] [varchar](50) NULL,
		[ContrSolic] [varchar](50) NULL,
		[ContrExec] [varchar](50) NULL,
		[Ato] [varchar](30) NULL,
		[Recuperado] [bit] NULL,
		[DataRecup] [datetime] NULL,
		[Refresh] [timestamp] NULL,
		[ValorMedico] [float] NULL,
		[Valor_Recuperado] [float] NULL,
		[CodTUSS] [varchar](15) NULL,
		[CodPact] [int] NULL,
	 CONSTRAINT [PK_procdoc_del] PRIMARY KEY CLUSTERED 
	(
		[Codigo] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO
 
IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TG_procpact_del]'))
DROP TRIGGER [dbo].[TG_procpact_del] 
GO
 
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TG_procpact_del]'))
EXEC dbo.sp_executesql @statement = N'-- +=========================================================================+
-- | Author:		Bruno Portella SimÃ£o                                     |  
-- | Create date:	05/06/2013                                               |
-- | Description:	Trigger que irÃ¡ transferir o registro deletado da tabela |
-- |				procpact para a tabela procpact_del						 |
-- +=========================================================================+
CREATE TRIGGER [dbo].[TG_procpact_del] 
		    ON [dbo].[procpact] AFTER DELETE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
    -- Insert statements for trigger here
    DECLARE @Codigo				INT,
			@Coluna				VARCHAR(100)
 
	DECLARE	@Campos				VARCHAR(8000),
			@Comando			NVARCHAR(4000),
			@ProcedureNumber	INT
 
	-- Cria uma tabela temporÃ¡ria...
	IF	OBJECT_ID(''tmp_procpact'') IS NOT NULL
		DROP TABLE tmp_procpact
	
	SELECT	d.* 
	INTO	tmp_procpact
	FROM	deleted AS d
	
	-- Recupera o ProcedureNumber do registro deletado...
	SELECT	@ProcedureNumber = tmp_pp.ProcedureNumber
	FROM	tmp_procpact AS tmp_pp
	
	-- Cursor para recuperar, de forma dinÃ¢mica, todos os campos da tabela procpact...
	DECLARE Config
	CURSOR  FOR
 
		SELECT		ROW_NUMBER() OVER(ORDER BY c.colid)	AS Cod_Coluna,
					''['' + c.Name + '']''				AS Coluna
		FROM		SYSOBJECTS	AS t
		INNER JOIN	SYSCOLUMNS	AS c ON t.ID = c.ID
		WHERE		t.Name  = ''procpact''
		  AND		c.Name <> ''Refresh''
		ORDER BY	c.colid
 
	OPEN  Config
	FETCH NEXT FROM Config INTO @Codigo, @Coluna
 
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Codigo = 1
			SET @Campos = @Coluna
		
		ELSE
			SET @Campos = @Campos + '', '' + @Coluna
			
		FETCH NEXT FROM Config INTO @Codigo, @Coluna
	END
 
	CLOSE	   Config
	DEALLOCATE Config
	
	-- CriaÃ§Ã£o do comando para a inserÃ§Ã£o na tabela procpact_del...
	SET @Comando = N''INSERT INTO procpact_del('' + @Campos + '')
					 SELECT '' + @Campos + ''
					 FROM   tmp_procpact
					 WHERE  ProcedureNumber = '' + CAST(@ProcedureNumber AS VARCHAR) + '''';
	
	EXEC SP_EXECUTESQL @query = @Comando
	
	-- Apaga a tabela temporÃ¡ria...
	IF	OBJECT_ID(''tmp_procpact'') IS NOT NULL
		DROP TABLE tmp_procpact
END'
GO
 
IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TG_procdoc_del]'))
DROP TRIGGER [dbo].[TG_procdoc_del] 
GO
 
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TG_procdoc_del]'))
EXEC dbo.sp_executesql @statement = N'-- +=========================================================================+
-- | Author:		Bruno Portella SimÃ£o                                     |  
-- | Create date:	05/06/2013                                               |
-- | Description:	Trigger que irÃ¡ transferir o registro deletado da tabela |
-- |				procdoc para a tabela procdoc_del						 |
-- +=========================================================================+
CREATE TRIGGER [dbo].[TG_procdoc_del] 
		    ON [dbo].[procdoc] AFTER DELETE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
 
    -- Insert statements for trigger here
    DECLARE @Codigo				INT,
			@Coluna				VARCHAR(100)
 
	DECLARE	@Campos				VARCHAR(8000),
			@Comando			NVARCHAR(4000),
			@ProcedureNumber	INT,
			@UniqueCod			INT
	
	-- Cria uma tabela temporÃ¡ria...
	IF	OBJECT_ID(''tmp_procdoc'') IS NOT NULL
		DROP TABLE tmp_procdoc
		
	SELECT	d.* 
	INTO	tmp_procdoc
	FROM	deleted AS d
	
	-- Recupera o ProcedureNumber e o UniqueCod do registro deletado...
	SELECT	@ProcedureNumber = tmp_pd.ProcedureNumber,
			@UniqueCod		 = tmp_pd.UniqueCod
	FROM	tmp_procdoc AS tmp_pd
 
	-- Cursor para recuperar, de forma dinÃ¢mica, todos os campos da tabela procdoc...
	DECLARE Config
	CURSOR  FOR
 
		SELECT		ROW_NUMBER() OVER(ORDER BY c.colid)	AS Cod_Coluna,
					''['' + c.Name + '']''				AS Coluna
		FROM		SYSOBJECTS	AS t
		INNER JOIN	SYSCOLUMNS	AS c ON t.ID = c.ID
		WHERE		t.Name  = ''procdoc''
		  AND		c.Name <> ''Refresh''
		ORDER BY	c.colid
 
	OPEN  Config
	FETCH NEXT FROM Config INTO @Codigo, @Coluna
 
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @Codigo = 1
			SET @Campos = @Coluna
		
		ELSE
			SET @Campos = @Campos + '', '' + @Coluna
			
		FETCH NEXT FROM Config INTO @Codigo, @Coluna
	END
 
	CLOSE	   Config
	DEALLOCATE Config
	
	-- CriaÃ§Ã£o do comando para a inserÃ§Ã£o na tabela procdoc_del...
	SET @Comando = N''INSERT INTO procdoc_del('' + @Campos + '')
					 SELECT '' + @Campos + ''
					 FROM   tmp_procdoc
					 WHERE  ProcedureNumber = '' + CAST(@ProcedureNumber AS VARCHAR) + ''
					   AND  UniqueCod		= '' + CAST(@UniqueCod		AS VARCHAR) + '''';
	
	EXEC SP_EXECUTESQL @query = @Comando
	
	-- Apaga a tabela temporÃ¡ria...
	IF	OBJECT_ID(''tmp_procdoc'') IS NOT NULL
		DROP TABLE tmp_procdoc
END'
GO

/*******************************************************************************************************************/
-- Story: 86.3
-- Data: 27/06/2013
-- ResponsÃ¡vel: Bruno Portella SimÃ£o
/*******************************************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('Convenio') AND NAME = 'TipoLancamento')
BEGIN
	ALTER TABLE [dbo].[Convenio] ADD [TipoLancamento] [INT] NULL DEFAULT 0;
END
GO

UPDATE	Convenio
SET	TipoLancamento = 0
WHERE	TipoLancamento IS NULL
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('procdoc') AND NAME = 'HonorÃ¡rios MÃ©dicos')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [HonorÃ¡rios MÃ©dicos] [float] NULL;
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'HonorÃ¡rios MÃ©dicos')
BEGIN
	ALTER TABLE [dbo].[procdoc_del] ADD [HonorÃ¡rios MÃ©dicos] [float] NULL;
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Custo Operacional')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [Custo Operacional] [float] NULL;
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'Custo Operacional')
BEGIN
	ALTER TABLE [dbo].[procdoc_del] ADD [Custo Operacional] [float] NULL;
END
GO

/*******************************************************************************************************************/
-- Story: 86.1
-- Data: 02/07/2013
-- ResponsÃ¡vel: Bruno Portella SimÃ£o
/*******************************************************************************************************************/

IF (SELECT COUNT(*) FROM TSMenus WHERE Codigo = 908 AND Descricao = 'B.I. - Business Inteligence') = 0 
BEGIN
  INSERT INTO TSMenus	   VALUES(908, 'B.I. - Business Inteligence')
  INSERT INTO TSMenuNiveis VALUES(908, 'A', 0, '')
  INSERT INTO TSMenuNiveis VALUES(908, 'F', 0, '')
END
GO

/* Story 87.1 Diego */
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Data_Retorno')
ALTER TABLE [dbo].[swclientes]
ADD [Data_Retorno] [datetime] NULL;
GO

/* Story 88.1 JÃºlio Magaldi */
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Tipo_Logradouro')
ALTER TABLE [dbo].[swclientes]
ADD [Tipo_Logradouro] [varchar] (3) NULL;
GO

/* Story 88.1 JÃºlio Magaldi */
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Numero_Logradouro')
ALTER TABLE [dbo].[swclientes]
ADD [Numero_Logradouro] [varchar] (5) NULL;
GO

/* Story 88.1 JÃºlio Magaldi */
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Complemento_Logradouro')
ALTER TABLE [dbo].[swclientes]
ADD [Complemento_Logradouro] [varchar] (10) NULL;
GO

/* Story 89.4 JÃºlio Magaldi */
IF( SELECT count(*) FROM TSMenus WHERE Codigo = 618 AND Descricao = 'Repasse - somente faturas com XML gerado' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(618,'Repasse - somente faturas com XML gerado')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(618,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(618,'F',1,'')
END
GO

/* Story 89.4 JÃºlio Magaldi */
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tscontrole_xml]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tscontrole_xml](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Cod_Lote_XML] [int] NULL,
	[Cod_Medico] [int] NULL,
 CONSTRAINT [PK_tscontrole_xml] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/*******************************************************************************************************************/
-- Story: 97.2
-- Data: 10/09/2013
-- ResponsÃ¡vel: Bruno Portella SimÃ£o
/*******************************************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('procpact') AND NAME = 'ValorISS' AND LENGTH='10')
BEGIN
	ALTER TABLE  [dbo].[procpact]
	ALTER COLUMN [ValorISS] [varchar](10) NULL;
END
GO


/**** Story 97.13 - Diego ****/

UPDATE tssadt 
	SET Plano = ' '
WHERE Plano = '<< Selecione o Plano >>'
GO


/*******************************************************************************************************************/
-- Story: 109.2
-- Data: 09/12/2013
-- ResponsÃ¡vel: Efraim Claudio Polla
/*******************************************************************************************************************/


IF (SELECT COUNT(*) FROM TSMenus WHERE Codigo = 117) = 0 
BEGIN
  INSERT INTO TSMenus	   VALUES(117, 'ConfiguraÃ§Ãµes &Gerais')
  INSERT INTO TSMenuNiveis VALUES(117, 'A', 0, '')
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('GTUsuarios') AND NAME = 'Mouse')
BEGIN
	ALTER TABLE  [dbo].[GTUsuarios]
	ADD [Mouse] bit DEFAULT 1;
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TSConfig]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[TSConfig](
		[AdicionalNoturno] [float] NULL DEFAULT ((0)),
		[FinanceiroObrigatorio] [bit] NULL DEFAULT ((0))
	) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM TSConfig)
BEGIN
	INSERT INTO TSConfig (AdicionalNoturno, FinanceiroObrigatorio) VALUES (0,0)
END
GO

/*o valar do campo ValorISS era maior em procpact alterado a tabela procpact_del para o mesmo tamanho*/

ALTER TABLE  [dbo].[procpact_del]
        ALTER COLUMN ValorISS VARCHAR(10);

/*******************************************************************************************************************/
-- Story: 134.6
-- Data: 28/05/2014
-- ResponsÃ¡vel: Aluan Henrique Alves Cabral
/*******************************************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Custo Operacional')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [Custo Operacional] [float] NULL;
END
GO

/*********************************************************************************/
-- Story......: 126.7
-- Data.......: 10/06/2014
-- Atualizada.: 26/06/2014
-- Responsavel: Joao Paulo Luiz Lopes
/*********************************************************************************/

/****** Object:  StoredProcedure [dbo].[SP_CopiaBaseDados]    Script Date: 26/08/2014 16:17:33 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SP_CopiaBaseDados]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[SP_CopiaBaseDados]

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SP_CopiaBaseDados]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- +============================================================================+
-- | Author.....: JoÃ£o Paulo Luiz Lopes                 						|
-- | Create date: 10/06/2014													|
-- | Description: Procedure que realiza a cÃ³pia de uma base de dados            |
-- +============================================================================+
CREATE PROCEDURE [dbo].[SP_CopiaBaseDados]
	-- Add the parameters for the stored procedure here
	@DBPath    VARCHAR(255), -- caminho da base de dados do sistema
	@DBOrigem  VARCHAR(50),	 -- nome da base de dados de origem
	@DBDestino VARCHAR(50)	 -- nome da base de dados nova
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here		
	DECLARE @Origem		VARCHAR(255) 
	DECLARE @Destino	VARCHAR(255) 
	DECLARE @Backup		VARCHAR(255)
	DECLARE @Log		VARCHAR(255)
	DECLARE @ArqDB		VARCHAR(50)
	DECLARE @ArqLog		VARCHAR(50)
												
	-- seta os caminhos dos arquivos						
	SET @Origem  = N'''' + @DBPath + ''\\'' + @DBOrigem  + ''.mdf''
	SET @Destino = N'''' + @DBPath + ''\\'' + @DBDestino + ''.mdf''
	SET @Backup  = N'''' + @DBPath + ''\\'' + @DBOrigem  + ''.bak''
	SET @Log     = N'''' + @DBPath + ''\\'' + @DBDestino + ''_log.ldf''

	/* pega o nome do arquivo logico da base de dados de origem */
	SELECT @ArqDB = f.name 
	FROM   sys.databases d 
		   INNER JOIN sys.master_files f 
				   ON d.database_id = f.database_id 
	WHERE  d.name = @DBOrigem 
	AND	   f.type_desc = ''ROWS''

	/* pega o nome do arquivo logico do arquivo de log da base de dados */
	SELECT @ArqLog = f.name 
	FROM   sys.databases d 
		   INNER JOIN sys.master_files f 
		   ON d.database_id = f.database_id 
	WHERE  d.name = @DBOrigem 
	AND	   f.type_desc = ''LOG''
						
	-- faz o backup da base de dados de origem
	BACKUP DATABASE @DBOrigem 
	        TO DISK = @Backup
	  WITH NOFORMAT, 
             NOINIT,               
		       SKIP, 
	       NOREWIND, 
	       NOUNLOAD,  
	          STATS = 10
			  			  			
	-- cria uma nova base a partir do backup	       
	RESTORE DATABASE @DBDestino
		   FROM DISK = @Backup
		WITH REPLACE,
		        MOVE @ArqDB  TO @Destino,
		        MOVE @ArqLog TO @Log
END' 
END
GO

/*******************************************************************************************************************/
-- Story: 138.5
-- Data: 25/06/2014
-- ResponsÃ¡vel: Aluan Henrique Alves Cabral
/*******************************************************************************************************************/
IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('MEDCONV') AND NAME = 'is_executante')
BEGIN
	ALTER TABLE [dbo].[MEDCONV] ADD [is_executante] [bit] NOT NULL DEFAULT 1;
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc') AND NAME = 'ValorMedicoSolicitante')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [ValorMedicoSolicitante] [float];
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'ValorMedicoSolicitante')
BEGIN
	ALTER TABLE [dbo].[procdoc_del] ADD [ValorMedicoSolicitante] [float];
END
GO


IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc') AND NAME = 'CodMatMed')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [CodMatMed] [int];
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'CodMatMed')
BEGIN
	ALTER TABLE [dbo].[procdoc_del] ADD [CodMatMed] [int];
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Servico')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [Servico] [bit];
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Via_Acesso')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [Via_Acesso] [varchar] (20) NULL;
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Tecnica')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [Tecnica] [varchar] (20) NULL;
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc') AND NAME = 'PRA')
BEGIN
	ALTER TABLE [dbo].[procdoc] ADD [PRA] [float];
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'Servico')
BEGIN
	ALTER TABLE [dbo].[procdoc_del] ADD [Servico] [bit];
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'Via_Acesso')
BEGIN
	ALTER TABLE [dbo].[procdoc_del] ADD [Via_Acesso] [varchar] (20) NULL;
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'Tecnica')
BEGIN
	ALTER TABLE [dbo].[procdoc_del] ADD [Tecnica] [varchar] (20) NULL;
END
GO

IF NOT EXISTS (
 SELECT * 
 FROM SYSCOLUMNS 
 WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'PRA')
BEGIN
	ALTER TABLE [dbo].[procdoc_del] ADD [PRA] [float];
END
GO

-----------------

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tscontrole_guias]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tscontrole_guias](
    [Num_Guia] [varchar](50) NOT NULL,
    [Data] [datetime] NOT NULL
) ON [PRIMARY]
END
GO


IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc') AND NAME = 'Cod_Unidade')
 ALTER TABLE procdoc
	ADD [Cod_Unidade] varchar(25) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'Cod_Unidade')
 ALTER TABLE procdoc_del
	ADD [Cod_Unidade] varchar(25) NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsresumo') AND NAME = 'DORN')
ALTER TABLE [dbo].[tsresumo]
ADD [DORN] [varchar](1) NULL;
GO

/*******************************************************************************************************************/
-- Story: 163.9
-- Data: 16/12/2014
-- ResponsÃ¡vel: Aline Alves Garcia
-- Flag para verificar o check para habilitar a aba de executantes da guia de solicitaÃ§Ã£o de sadt
/*******************************************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('gtusuarios') AND NAME = 'HabilitarAba')
ALTER TABLE [dbo].[gtusuarios]
ADD [HabilitarAba] [bit] DEFAULT(0)    
GO

UPDATE gtusuarios SET HabilitarAba = 0 WHERE HabilitarAba IS NULL
GO

/*******************************************************************************************************************/
-- Story: 159.3
-- Data: 19/12/2014
-- ResponsÃ¡vel: Aline Alves Garcia
-- Criar campo para armazenar a porcentagem do intrumentador
/*******************************************************************************************************************/

GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('convenio') AND NAME = 'Instrumentador')
ALTER TABLE [dbo].[convenio]
ADD [Instrumentador] [float] NULL;

/*******************************************************************************************************************/
-- Story: 170.5
-- Data: 05/02/2015
-- ResponsÃ¡vel: Aline Alves Garcia
-- Tabela para armazenar os dados adicionais
-- Tabela foi gerada pela adequaÃ§Ã£o para o cliente 20338- ONCO-RAD - SERVICOS DE ONCOLOGIA E RADIOTERAPIA LTDA - ME
/*******************************************************************************************************************/

GO
IF OBJECT_ID('swclientes_DadosAdicionais') IS NULL
CREATE TABLE [dbo].[swclientes_DadosAdicionais](
	[CodCliente] [int] NOT NULL,
	[CID] [varchar] (10) NULL,
	[Estadiamento] [varchar] (2) NULL,
	[DataDiagnostico] [datetime] NULL,
 CONSTRAINT [PK_swclientes_DadosAdicionais] PRIMARY KEY CLUSTERED 
(
	[CodCliente] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes_DadosAdicionais') AND NAME = 'Excluido')
ALTER TABLE [dbo].[swclientes_DadosAdicionais]
ADD [Excluido] [bit] NULL;
GO

/**********************************************************************************************/
-- Data: 20/03/2015
-- ResponsÃ¡vel: Aline Alves
-- Script copiado do ColmÃ©ia Faturamento
/**********************************************************************************************/

IF OBJECT_ID('cmMapeamentoTNUMM') IS NULL
BEGIN
CREATE TABLE [dbo].[cmMapeamentoTNUMM](
	[CampoSistema] [varchar](255) NULL,
	[CampoTNUMM] [varchar](255) NULL,
	[Tipo] [int] NULL
) ON [PRIMARY]
END
GO

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Fabricante] varchar(255) NULL

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Motivo] varchar(255) NULL

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Compra] varchar(255) NULL

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Embalagem] varchar(4000) NULL

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Unidade] varchar(255) NULL

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Fracionar] varchar(255) NULL

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Grupo] varchar(255) NULL

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Reutilizacao] varchar(255) NULL

ALTER TABLE [dbo].[cmunimed] 
ALTER COLUMN [Situacao] varchar(255) NULL

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cmunimed') AND NAME = 'Valor')
ALTER TABLE [dbo].[cmunimed]
ADD [Valor] [float] NULL;
GO

/**********************************************************************************************/
-- Data: 27/07/2015
-- ResponsÃ¡vel: Aline Alves
-- ImportaÃ§Ã£o de clientes no MedTISS
/**********************************************************************************************/

IF( SELECT count(*) FROM TSMenus WHERE Codigo = 304 AND Descricao = 'Importar Clientes' ) = 0 
BEGIN
  INSERT INTO tsmenus([Codigo], [Descricao]) values(304,'Importar Clientes')
  INSERT INTO tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) VALUES(304,'A',1,'')
  INSERT INTO tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) VALUES(304,'F',1,'')
END
GO

GO
IF OBJECT_ID('tsClienteMapeamentoCampo') IS NULL
CREATE TABLE [dbo].[tsClienteMapeamentoCampo](
	[CampoSistema] [varchar] (255) NOT NULL,
	[CampoExterno] [varchar] (255) NULL
)ON [PRIMARY];

IF OBJECT_ID('tsClienteMapeamento') IS NULL
CREATE TABLE [dbo].[tsClienteMapeamento](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Nome] [varchar](255) NULL,
	[CPF] [varchar](15) NULL,
	[Raca] [varchar](10) NULL,
	[Sexo] [varchar](10) NULL,
	[EstadoCivil] [varchar](10) NULL,
	[DataNascimento] [datetime] NULL,
	[Logradouro] [varchar](255) NULL,
	[TipoLogradouro] [varchar](255) NULL,
	[NumeroLogradouro] [varchar](10) NULL,
	[ComplementoLogradouro] [varchar](255) NULL,
	[Bairro] [varchar](255) NULL,
	[Cidade] [varchar](255) NULL,
	[Estado] [varchar](20) NULL,
	[CEP] [varchar](20) NULL,
	[Telefone1] [varchar](30) NULL,
	[Telefone2] [varchar](30) NULL,
	[Telefone3] [varchar](30) NULL,
	[RegistroConvenio] [varchar](40) NULL,
	[RG] [varchar](50) NULL,
	[CNS] [varchar](50) NULL,
	[Mae] [varchar](255) NULL,
	[Pai] [varchar](255) NULL,
	[CID] [varchar](50) NULL,
	[Estadiamento] [varchar](10) NULL,
	[DataDiagnostico] [datetime] NULL,
 CONSTRAINT [PK_tsClienteMapeamento] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY];
GO

-- Story: 196.6 - 03/08/2015 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('ProcDoc') AND NAME = 'Data_Glosa')
BEGIN
	ALTER TABLE [dbo].[ProcDoc]
	ADD   [Data_Glosa] [datetime];
END
GO

-- Story: 196.6 - 03/08/2015 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('ProcDoc_del') AND NAME = 'Data_Glosa')
BEGIN
	ALTER TABLE [dbo].[ProcDoc_del]
	ADD   [Data_Glosa] [datetime];
END
GO

-- Story: 196.6 - 03/08/2015 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('ProcDoc') AND NAME = 'Valor_Glosado')
BEGIN
	ALTER TABLE [dbo].[ProcDoc]
	ADD   [Valor_Glosado] [float];
END
GO

-- Story: 196.6 - 03/08/2015 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('ProcDoc_del') AND NAME = 'Valor_Glosado')
BEGIN
	ALTER TABLE [dbo].[ProcDoc_del]
	ADD   [Valor_Glosado] [float];
END
GO

-- Story: 196.10 - 05/08/2015 - Bruno Portella SimÃ£o
IF (SELECT COUNT(*) FROM TSMenus WHERE Codigo = 619 AND Descricao = 'LanÃ§amentos por Procedimento') = 0 
BEGIN
  INSERT INTO TSMenus	   VALUES(619, 'LanÃ§amentos por Procedimento')
  INSERT INTO TSMenuNiveis VALUES(619, 'A', 0, '')
  INSERT INTO TSMenuNiveis VALUES(619, 'F', 0, '')
END
GO

-- Story: 196.10 - 05/08/2015 - Bruno Portella SimÃ£o
IF (SELECT COUNT(*) FROM TSMenus WHERE Codigo = 620 AND Descricao = 'Totalizar por ConvÃªnio ...') = 0 
BEGIN
  INSERT INTO TSMenus	   VALUES(620, 'Totalizar por ConvÃªnio ...')
  INSERT INTO TSMenuNiveis VALUES(620, 'A', 0, '')
  INSERT INTO TSMenuNiveis VALUES(620, 'F', 0, '')
END
GO

-- Story: 196.10 - 05/08/2015 - Bruno Portella SimÃ£o
IF (SELECT COUNT(*) FROM TSMenus WHERE Codigo = 621) = 0 
BEGIN
  INSERT INTO TSMenus	   VALUES(621, 'Totalizar por MÃ©dico ...')
  INSERT INTO TSMenuNiveis VALUES(621, 'A', 0, '')
  INSERT INTO TSMenuNiveis VALUES(621, 'F', 0, '')
END
GO

-- Story: 196.10 - 05/08/2015 - Bruno Portella SimÃ£o
IF (SELECT COUNT(*) FROM TSMenus WHERE Codigo = 622 AND Descricao = 'Totalizar por Procedimento ...') = 0 
BEGIN
  INSERT INTO TSMenus	   VALUES(622, 'Totalizar por Procedimento ...')
  INSERT INTO TSMenuNiveis VALUES(622, 'A', 0, '')
  INSERT INTO TSMenuNiveis VALUES(622, 'F', 0, '')
END
GO

/**********************************************************************************************/
-- Story: 196.8
-- Data: 05/08/2015
-- ResponsÃ¡vel: Aline Alves Garcia
-- CriaÃ§Ã£o do menu para configuraÃ§Ã£o de impressos
/**********************************************************************************************/

IF( SELECT COUNT(*) FROM TSMenus WHERE Codigo = 118 AND Descricao = 'ConfiguraÃ§Ã£o de Impresso ...' ) = 0 
BEGIN
  insert into tsmenus([Codigo], [Descricao]) values(118,'ConfiguraÃ§Ã£o de Impresso ...')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(118,'A',1,'')
  insert into tsmenuniveis([Cod_Menu], [Nivel], [Botao], [Atalho]) values(118,'F',1,'')
END
GO

/**********************************************************************************************/
-- Story: 214.6
-- Data: 21/12/2015
-- ResponsÃ¡vel: Aline Alves Garcia
-- OpÃ§Ã£o de boleto
/**********************************************************************************************/
IF (SELECT COUNT(*) FROM tsMenus WHERE Codigo = 912 AND Descricao = 'Ãrea VIP Â®: Gerar Boletos') <= 0 
BEGIN
    INSERT INTO tsMenus(Codigo, Descricao) VALUES(912, 'Ãrea VIP Â®: Gerar Boletos')
END
GO

IF (SELECT COUNT(*) FROM tsMenuNiveis WHERE Cod_Menu = 912 AND Nivel = 'A') <= 0 
BEGIN
    INSERT INTO tsMenuNiveis VALUES(912, 'A', 1, '')
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('gtusuarios') AND NAME = 'HabilitarBoleto')
BEGIN
	ALTER TABLE [dbo].[gtusuarios] ADD [HabilitarBoleto] [bit] NULL DEFAULT 0;

END
GO

UPDATE	gtusuarios
SET	HabilitarBoleto = 1
WHERE	HabilitarBoleto IS NULL
AND Nivel = 'A'
GO

UPDATE	gtusuarios
SET	HabilitarBoleto = 0
WHERE	HabilitarBoleto IS NULL
AND Nivel = 'F'
GO

/**********************************************************************************************/
-- Story: 225.6
-- Data: 23/02/2016
-- ResponsÃ¡vel: Aline Alves Garcia
/**********************************************************************************************/
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsHonExec') AND NAME = 'CNPJ_Profissional')
ALTER TABLE [dbo].[tsHonExec]
ADD [CNPJ_Profissional] [varchar](15) NULL;

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Descricao' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Descricao] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Comercial' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Comercial] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Fabricante' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Fabricante] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Compra' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Compra] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Embalagem' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Embalagem] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Unidade' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Unidade] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Especif' AND LENGTH = '255')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Especif] [varchar](255) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Fracionar' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Fracionar] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Grupo' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Grupo] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Reutilizacao' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Reutilizacao] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Situacao' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Situacao] [varchar](4000) NULL;
END
GO

-- Story 225.3 - 24/02/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMUnimed') AND NAME = 'Motivo' AND LENGTH = '4000')
BEGIN
	ALTER TABLE  [dbo].[CMUnimed]
	ALTER COLUMN [Motivo] [varchar](4000) NULL;
END
GO

/**********************************************************************************************/
-- Story: 229.1
-- Data: 22/03/2016
-- ResponsÃ¡vel: Aline Alves Garcia
/**********************************************************************************************/
GO
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Etnia')
ALTER TABLE [dbo].[swclientes]
ADD [Etnia] [varchar] (10) NULL;

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Codigo_Familia')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Codigo_Familia] [int];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Num_Prontuario')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Num_Prontuario] [int];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Num_Prontuario_Papel')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Num_Prontuario_Papel] [int];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Num_Pessoa_Domicilio')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Num_Pessoa_Domicilio] [int];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Cor')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Cor] [smallint];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'UF')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [UF] [varchar](2);
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Nacionalidade')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Nacionalidade] [smallint];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Pais_Origem')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Pais_Origem] [varchar](50);
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Data_Entrada_Brasil')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Data_Entrada_Brasil] [datetime];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Numero_Portaria')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Numero_Portaria] [varchar](20);
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Escolaridade')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Escolaridade] [varchar](2);
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Situacao_Conjugal')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Situacao_Conjugal] [varchar](70);
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('SWClientes') AND NAME = 'Frequenta_Escola')
BEGIN
	ALTER TABLE [dbo].[SWClientes]
	ADD   [Frequenta_Escola] [bit];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMAvalEspec') AND NAME = 'Indicacao')
BEGIN
	ALTER TABLE [dbo].[CMAvalEspec]
	ADD   [Indicacao] [text];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMAvalEspec') AND NAME = 'Data_Solic')
BEGIN
	ALTER TABLE [dbo].[CMAvalEspec]
	ADD   [Data_Solic] [datetime];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMAvalEspec') AND NAME = 'Hora_Solic')
BEGIN
	ALTER TABLE [dbo].[CMAvalEspec]
	ADD   [Hora_Solic] [datetime];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMAvalEspec') AND NAME = 'Data_Parecer')
BEGIN
	ALTER TABLE [dbo].[CMAvalEspec]
	ADD   [Data_Parecer] [datetime];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMAvalEspec') AND NAME = 'Hora_Parecer')
BEGIN
	ALTER TABLE [dbo].[CMAvalEspec]
	ADD   [Hora_Parecer] [datetime];
END
GO

-- Story: 233.6 - 22/04/2016 - Bruno Portella SimÃ£o
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('CMAvalEspec') AND NAME = 'Pendente')
BEGIN
	ALTER TABLE [dbo].[CMAvalEspec]
	ADD   [Pendente] [bit];
END
GO

-- Story: 283.9 - 12/04/2017 - Aline Alves
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('ProcDoc') AND NAME = 'CodDoctor')
BEGIN
	ALTER TABLE [dbo].[ProcDoc]
	ADD   [CodDoctor] [int];
END
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('ProcDoc_Del') AND NAME = 'CodDoctor')
BEGIN
	ALTER TABLE [dbo].[ProcDoc_Del]
	ADD   [CodDoctor] [int];
END
GO

UPDATE p
SET p.CodDoctor = m.Codigo
FROM ProcDoc p
INNER JOIN cmMedicos m ON p.Doctor = SUBSTRING(m.Nome, 1, 40)
WHERE CodDoctor IS NULL

/****** Object:  Trigger [TG_CodDoctor]    Script Date: 12/04/2017 09:05:04 ******/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TG_CodDoctor]'))
DROP TRIGGER [dbo].[TG_CodDoctor]
GO

IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TG_CodDoctor]'))
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		Aline Alves
-- Create date: 12/04/2017
-- Description:	Trigger para salvar o codigo do mÃ©dico na coluna coddoctor ao salvar um novo registro na procdoc
-- =============================================
CREATE TRIGGER [dbo].[TG_CodDoctor] 
   ON  [dbo].[procdoc] 
   AFTER INSERT
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	UPDATE p
	SET p.CodDoctor = m.Codigo
	FROM procdoc P
	INNER JOIN inserted i ON i.ProcedureNumber = p.ProcedureNumber AND p.UniqueCod = i.UniqueCod
	INNER JOIN cmMedicos m ON m.nome = p.Doctor
	 
    -- Insert statements for trigger here

END
' 
GO


/**********************************************************************************************/
-- Story: 283.6
-- Data: 06/04/2017
-- ResponsÃ¡vel: Cristiane Lemos
/**********************************************************************************************/
Update tsmenus set Descricao = 'Cadastro de &Profissionais (Prestadores)'		where Codigo = 110
Update tsmenus set Descricao = '&Valor Procedimento / Profissional'				where Codigo = 111
Update tsmenus set Descricao = 'LanÃ§amentos por Profissional ...'				where Codigo = 604
Update tsmenus set Descricao = 'Profissionais - por grupo de procedimentos ...' where Codigo = 605
Update tsmenus set Descricao = 'Totalizar por Profissional ...'					where Codigo = 621
Update tsmenus set Descricao = 'LanÃ§amentos por Profissionais ...'				where Codigo = 702

GO

/**********************************************************************************************/
-- Story: 289.5
-- Data: 16/05/2017
-- ResponsÃ¡vel: Aline Alves
/**********************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsConfig') AND NAME = 'BloqueioAssumir')
ALTER TABLE [dbo].[tsConfig]
ADD [BloqueioAssumir] [bit] NULL;
GO

/**********************************************************************************************/
-- Story: 294.10
-- Data: 04/07/2017
-- ResponsÃ¡vel: Welington Dias
/**********************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsConfig') AND NAME = 'BloqueioEdicao')
ALTER TABLE [dbo].[tsConfig]
ADD [BloqueioEdicao] [bit] NULL;
GO


/**********************************************************************************************/
-- Story: 199.18 
-- Data: 27/07/2017
-- ResponsÃ¡vel: Cristiane Lemos
/**********************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('tsClienteMapeamento') AND NAME = 'CodConvenio')
BEGIN
	ALTER TABLE [dbo].[tsClienteMapeamento]
	ADD   [CodConvenio] [int];
END  
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('tsClienteMapeamento') AND NAME = 'Convenio')
BEGIN
	ALTER TABLE [dbo].[tsClienteMapeamento]
	ADD   [Convenio] [varchar](100)NULL;
END
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('tsClienteMapeamento') AND NAME = 'CodPlano')
BEGIN
	ALTER TABLE [dbo].[tsClienteMapeamento]
	ADD   [CodPlano] [int];
END
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('tsClienteMapeamento') AND NAME = 'Plano')
BEGIN
	ALTER TABLE [dbo].[tsClienteMapeamento]
	ADD   [Plano] [varchar](100)NULL;
END
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('tsClienteMapeamento') AND NAME = 'EMail')
BEGIN
	ALTER TABLE [dbo].[tsClienteMapeamento]
	ADD   [EMail] [varchar](70)NULL;
END
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('tsClienteMapeamento') AND NAME = 'ValidadeCarteira')
BEGIN
	ALTER TABLE [dbo].[tsClienteMapeamento]
	ADD   [ValidadeCarteira] [datetime];
END

/**********************************************************************************************/
-- Story: 300.7
-- Data: 04/08/2017
-- ResponsÃ¡vel: Cristiane Lemos
/**********************************************************************************************/


IF (SELECT COUNT(*) FROM TSMenus WHERE Codigo = 623 AND Descricao = 'Totalizar por Especialidade ...') = 0 
BEGIN
  INSERT INTO TSMenus	   VALUES(623, 'Totalizar por Especialidade ...')
  INSERT INTO TSMenuNiveis VALUES(623, 'A', 0, '')
  INSERT INTO TSMenuNiveis VALUES(623, 'F', 0, '')
END
GO

/**********************************************************************************************/
-- Story: 304.7
-- Data: 06/09/2017
-- ResponsÃ¡vel: Welington Dias
/**********************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('cpcontas_receber') AND NAME = 'Codigo_Fatura')
ALTER TABLE [dbo].[cpcontas_receber]
ADD [Codigo_Fatura] [int] NULL;
GO


/**********************************************************************************************/
-- Story: 219.40 - InclusÃ£o de dados de Procedimento e MÃ©dico no campo ObservaÃ§Ã£o
-- Data: 10/11/2017
-- ResponsÃ¡vel: Cristiane Lemos
/**********************************************************************************************/

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsConfig') AND NAME = 'ProcedimObs')
ALTER TABLE [dbo].[tsConfig]
ADD [ProcedimObs] [bit] NULL;
GO

/**********************************************************************************************/
-- Story: 326.7 - Limite de caracteres coluna Doctor, tabela ProcDoc
-- Data: 29/01/2018
-- ResponsÃ¡vel: Welington Dias
/**********************************************************************************************/

/**********************************************************************************************/
-- Story: 341.5 - Limite de caracteres coluna Doctor, Usuario, ContrExec tabela ProcDoc e ProcDoc_del
-- Data: 15/05/2018
-- ResponsÃ¡vel: Leonardo Dias
/**********************************************************************************************/

IF EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcDoc') AND NAME = 'ContrExec')
ALTER TABLE [PROCDOC] ALTER COLUMN [ContrExec] VARCHAR(255);
GO
IF EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcDoc') AND NAME = 'USUARIO')
ALTER TABLE [PROCDOC] ALTER COLUMN [USUARIO] VARCHAR(255);
GO
IF EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcDoc') AND NAME = 'Doctor')
ALTER TABLE [PROCDOC] ALTER COLUMN [Doctor] VARCHAR(255);
GO
IF EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcDoc_Del') AND NAME = 'ContrExec')
ALTER TABLE [PROCDOC_DEL] ALTER COLUMN [ContrExec] VARCHAR(255);
GO
IF EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcDoc_Del') AND NAME = 'USUARIO')
ALTER TABLE [PROCDOC_DEL] ALTER COLUMN [USUARIO] VARCHAR(255);
GO
IF EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcDoc_Del') AND NAME = 'Doctor')
ALTER TABLE [PROCDOC_DEL] ALTER COLUMN [Doctor] VARCHAR(255);
GO





/**********************************************************************************************/
-- Story: 342.8 - Atualizados valores da tsoutrasitens caso o valor_total for NULL
-- Data: 25/07/2018
-- ResponsÃ¡vel: Felipe Hercules
/**********************************************************************************************/

update tsoutrasitens set valor_Total = convert(numeric(8,2), Valor_unit) * quantidade * percentual
where valor_total is null
GO

/**********************************************************************************************/
-- Story: 381.1 - Inclui coluna de conta a pagar para funÃ§Ã£o de manutenÃ§Ã£o de repasse
-- Data: 18/02/2019
-- ResponsÃ¡vel: Rafael Ricardo Castro
/**********************************************************************************************/
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc') AND NAME = 'CodContaPagar')
ALTER TABLE [dbo].procdoc
ADD CodContaPagar [int] NULL;
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('procdoc_del') AND NAME = 'CodContaPagar')
ALTER TABLE [dbo].procdoc_del
ADD CodContaPagar [int] NULL;
GO

/**********************************************************************************************/
-- Story: 412.1 - Inclui a coluna Cod_Regiao na tabela ProcOdonto
-- Data: 08/10/2019
-- ResponsÃ¡vel: Welington Dias
/**********************************************************************************************/
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcOdonto') AND NAME = 'Cod_Regiao')
ALTER TABLE [dbo].[ProcOdonto]
ADD [Cod_Regiao] [varchar] (30) NULL;
GO

/**********************************************************************************************/
-- Story: 381.1 - Inclui coluna de centro de custo no convÃªnio
-- Data: 20/02/2020
-- ResponsÃ¡vel: Rafael Ricardo Castro
/**********************************************************************************************/
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('convenio') AND NAME = 'CentroCusto')
ALTER TABLE [dbo].convenio
ADD [CentroCusto] [int] NULL;
GO

/**********************************************************************************************/
-- Story: 427.40 - Inclui a coluna BloqueioAdicional na tabela tsconfig
-- Data: 17/02/2020
-- ResponsÃ¡vel: Renan Ignacio
/**********************************************************************************************/
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsconfig') AND NAME = 'BloqueioAdicional')
ALTER TABLE [dbo].[tsconfig]
ADD [BloqueioAdicional] [bit] NOT NULL DEFAULT 0;
GO

/**********************************************************************************************/
-- Story: 427.40 - Inclui a coluna BloqueioDesconto na tabela tsconfig
-- Data: 17/02/2020
-- ResponsÃ¡vel: Renan Ignacio
/**********************************************************************************************/
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tsconfig') AND NAME = 'BloqueioDesconto')
ALTER TABLE [dbo].[tsconfig]
ADD [BloqueioDesconto] [bit] NOT NULL DEFAULT 0;
GO









































/*Manter essa procedure sempre no fim */


/****** Object:  StoredProcedure [dbo].[AddNewColumns]    Script Date: 08/25/2014 18:59:21 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AddNewColumns]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AddNewColumns]
GO
/****** Object:  StoredProcedure [dbo].[AddNewColumns]    Script Date: 08/25/2014 18:59:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AddNewColumns]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'-- =============================================
-- Author:		<Diego E. C. Thomaz>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[AddNewColumns]
AS
BEGIN
	DECLARE @tabela varchar(100),
			@SQL    nvarchar(4000)

	DECLARE addcampo CURSOR FOR
		
		SELECT name 
		FROM sys.databases
		WHERE name like ''colmeia_tbl%''

	OPEN addcampo
	FETCH addcampo INTO @tabela

	WHILE @@FETCH_STATUS = 0
	BEGIN
				
		SET @SQL =	'' USE ['' + @tabela + ''] '' +
					'' IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''''[''+ @tabela + ''].[dbo].[materiai]''''))'' +
					'' BEGIN'' + 
								  '' IF NOT EXISTS (SELECT * FROM SYSCOLUMNS '' +
								  ''                WHERE ID = OBJECT_ID(''''materiai'''') AND NAME = ''''CodUnidade'''')'' +
								  '' ALTER TABLE [dbo].[materiai] '' +
								  '' ADD [CodUnidade] [varchar] (25) NULL '' +  
					'' END'' +
			
		
		
					'' IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''''[''+ @tabela + ''].[dbo].[taxas]'''') AND type in (N''''U''''))'' +
					'' BEGIN '' +
								   '' IF NOT EXISTS (SELECT * FROM SYSCOLUMNS '' +
								   ''                WHERE ID = OBJECT_ID(''''taxas'''') AND NAME = ''''CodUnidade'''')'' +
								   '' ALTER TABLE [dbo].[taxas] '' +
								   '' ADD [CodUnidade] [varchar] (25) NULL '' + 
					'' END'' +
					
					'' IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''''[''+ @tabela + ''].[dbo].[materiai]'''') AND type in (N''''U''''))'' +
					'' BEGIN '' +
						   '' IF NOT EXISTS (SELECT * FROM SYSCOLUMNS '' +
						   ''                WHERE ID = OBJECT_ID(''''materiai'''') AND NAME = ''''Nao_Valor'''')'' +
						   '' ALTER TABLE [dbo].[materiai] '' +
						   '' ADD [Nao_Valor] [bit] DEFAULT (0) NULL '' +  
					'' END '' +
					
					'' IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''''[''+ @tabela + ''].[dbo].[materiai]'''') AND type in (N''''U''''))'' +
					'' BEGIN'' +
						   '' ALTER TABLE [dbo].[materiai] '' +
						   '' ALTER COLUMN [Procedimento] [varchar] (4000) NULL '' +  
					'' END'' +
						
					'' IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''''[''+ @tabela + ''].[dbo].[materiai]'''') AND type in (N''''U''''))'' +
					'' BEGIN'' + 
						   '' ALTER TABLE [dbo].[materiai] '' +
						   '' ALTER COLUMN [Laboratorio] [varchar] (4000) NULL '' +  
					'' END'' + 
					
					'' IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N''''[''+ @tabela + ''].[dbo].[matkits]'''') AND type in (N''''U''''))''+
					'' BEGIN''+
						   '' IF NOT EXISTS (SELECT * FROM SYSCOLUMNS '' +
						   ''                WHERE ID = OBJECT_ID(''''matkits'''') AND NAME = ''''Valor'''')'' +
						   '' ALTER TABLE [dbo].[matkits] '' +
						   '' ADD [Valor] [float] NULL ''+  
					'' END''	
		
		EXECUTE sp_executesql @SQL	
		
		FETCH addcampo INTO @tabela		       
	END		      

	CLOSE addcampo
	DEALLOCATE addcampo 
END
' 
END
GO

EXEC AddNewColumns

/****** Object:  Table [dbo].[TSOrcamento_Itens]    Script Date: 06/06/2018 20:27:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TSOrcamento_Itens]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[TSOrcamento_Itens](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[CodOrcamento] [int] NOT NULL,
	[CodProc] [varchar](50) NULL,
	[Procedimento] [varchar](255) NULL,
	[Valor] [money] NULL,
 CONSTRAINT [PK_TSOrcamento_Itens] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[TSOrcamentos]    Script Date: 06/06/2018 20:27:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TSOrcamentos]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[TSOrcamentos](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[CodCliente] [int] NOT NULL,
	[CodConvenio] [int] NULL,
	[Data] [datetime] NULL,
	[Excluido] [bit] NULL,
 CONSTRAINT [PK_TSOrcamentos] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[DF_TSOrcamentos_Data]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[TSOrcamentos] ADD  CONSTRAINT [DF_TSOrcamentos_Data]  DEFAULT (getdate()) FOR [Data]
END

GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[DF_TSOrcamentos_Excluido]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[TSOrcamentos] ADD  CONSTRAINT [DF_TSOrcamentos_Excluido]  DEFAULT ((0)) FOR [Excluido]
END

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('tssolicitacao') AND NAME = 'TipoEtapa')
ALTER TABLE [dbo].[tssolicitacao]
ADD [TipoEtapa] [int] NULL;
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_TSOrcamento_Itens_TSOrcamentos]') AND parent_object_id = OBJECT_ID(N'[dbo].[TSOrcamento_Itens]'))
ALTER TABLE [dbo].[TSOrcamento_Itens]  WITH CHECK ADD  CONSTRAINT [FK_TSOrcamento_Itens_TSOrcamentos] FOREIGN KEY([CodOrcamento])
REFERENCES [dbo].[TSOrcamentos] ([Codigo])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_TSOrcamento_Itens_TSOrcamentos]') AND parent_object_id = OBJECT_ID(N'[dbo].[TSOrcamento_Itens]'))
ALTER TABLE [dbo].[TSOrcamento_Itens] CHECK CONSTRAINT [FK_TSOrcamento_Itens_TSOrcamentos]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_TSOrcamentos_swclientes]') AND parent_object_id = OBJECT_ID(N'[dbo].[TSOrcamentos]'))
ALTER TABLE [dbo].[TSOrcamentos]  WITH CHECK ADD  CONSTRAINT [FK_TSOrcamentos_swclientes] FOREIGN KEY([CodCliente])
REFERENCES [dbo].[swclientes] ([CÃ³digo])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_TSOrcamentos_swclientes]') AND parent_object_id = OBJECT_ID(N'[dbo].[TSOrcamentos]'))
ALTER TABLE [dbo].[TSOrcamentos] CHECK CONSTRAINT [FK_TSOrcamentos_swclientes]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TSOrcamento_Materiais]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[TSOrcamento_Materiais](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[CodOrcamento] [int] NOT NULL,
	[CodMaterial] [varchar](20) NULL,
	[Material] [varchar](255) NULL,
	[Valor] [money] NULL,
 CONSTRAINT [PK_TSOrcamento_Materiais] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF OBJECT_ID('tsGlosa') IS NULL
	CREATE TABLE [dbo].[tsGlosa](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Registro_ANS] [varchar](6) NOT NULL,
	[Numero_Guia_Recurso] [varchar](20) NOT NULL,
	[Nome_Operadora] [varchar](70) NOT NULL,
	[Objeto_Recurso_Glosa] [varchar](1) NOT NULL,
	[Numero_Guia_Operadora] [varchar](20) NULL,
	[Codigo_Contratado_Executante] [varchar](14) NULL,
	[Nome_Contratado_Executante] [varchar](70) NULL,
	[Numero_Lote] [varchar](12) NOT NULL,
	[Numero_Protocolo] [varchar](12) NOT NULL,
	[Codigo_Glosa] [varchar](4) NULL,
	[Justificativa_Prestador_Recurso] [varchar](150) NULL,
	[Acatado] [bit] NULL,
	[Numero_Guia_Referente] [varchar](20) NULL,
	[Numero_Guia_Referente_Operadora] [varchar](20) NULL,
	[Senha] [varchar](20) NULL,
	[Valor_Total_Recursado] [numeric](8, 2) NOT NULL,
	[Valor_Total_Acatado] [numeric](8, 2) NOT NULL,
	[Data_Recurso_Glosa] [date] NOT NULL,
	[Tipo_Identificacao] [int] NOT NULL,
	[Identificacao_Prestador] [varchar](14) NOT NULL,
	[Excluido] [bit] NOT NULL,
        [Guia_Completa] [bit] NOT NULL,
 CONSTRAINT [PK_tsGlosa] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

IF OBJECT_ID('tsProcedimentosGlosa') IS NULL
CREATE TABLE [dbo].[tsProcedimentosGlosa](
	[Codigo] [int] IDENTITY(1,1) NOT NULL,
	[Guia_Glosa_Referente] [varchar](20) NOT NULL,
	[Data_Realizacao] [date] NOT NULL,
	[Data_Final] [date] NULL,
	[Tabela_Procedimento] [varchar](2) NOT NULL,
	[Codigo_Procedimento_Realizado] [varchar](20) NOT NULL,
	[Descricao_Procedimento_Realizado] [varchar](150) NOT NULL,
	[Grau_Participacao] [varchar](2) NOT NULL,
	[Codigo_Glosa_Procedimento] [varchar](4) NOT NULL,
	[Valor_Recursado] [numeric](6, 2) NOT NULL,
	[Justificativa_Prestador] [varchar](150) NOT NULL,
	[Valor_Acatado] [numeric](6, 2) NOT NULL,
	[Justificativa_Operadora] [varchar](450) NOT NULL,
 CONSTRAINT [PK_tsProcedimentosGlosa] PRIMARY KEY CLUSTERED 
(
	[Codigo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE tsguias
ALTER COLUMN Cod_Lote varchar(12);
GO

/**********************************************************************************************/
-- Story: 471.3 - CorreÃ§Ã£o Valores CH
-- Data: 13/07/2021
-- ResponsÃ¡vel: Guilherme Pedroza
/**********************************************************************************************/
IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcDoc') AND NAME = 'Correcao')
ALTER TABLE [dbo].[ProcDoc]
ADD [Correcao] bit
GO

IF NOT EXISTS (SELECT * FROM SYSCOLUMNS
WHERE ID = OBJECT_ID('ProcDoc_del') AND NAME = 'Correcao')
ALTER TABLE [dbo].[ProcDoc_del]
ADD [Correcao] bit
GO

/**********************************************************************************************/
-- Story: FÃ³rum 114733 - Cria os campos especificos da soluÃ§Ã£o Medsystem, soluÃ§Ã£o que possui mais campos.
-- SoluÃ§Ãµes: Medsystem, Metra, Labsys, Gerclim e MedTiss.
-- Data: 06/04/2022
-- ResponsÃ¡vel: Welington Dias
/**********************************************************************************************/

IF(SELECT columnproperty(object_id('dbo.SWClientes'),'CÃ³digo','IsIdentity')) = 0
BEGIN	 
	--Verifica se as colunas especificas das soluÃ§Ãµes existem
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Data_Retorno')
       ALTER TABLE [dbo].[swclientes] ADD [Data_Retorno] [datetime] NULL 	

	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Numero_Logradouro')
       ALTER TABLE [dbo].[swclientes] ADD [Numero_Logradouro] [varchar](5) NULL	
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Complemento_Logradouro')
	   ALTER TABLE [dbo].[swclientes] ADD [Complemento_Logradouro] [varchar](10) NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Tipo_Logradouro')
	   ALTER TABLE [dbo].[swclientes] ADD [Tipo_Logradouro] [varchar](3) NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Etnia')
	   ALTER TABLE [dbo].[swclientes] ADD [Etnia] [varchar](10) NULL
	
    IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Codigo_Familia')
	   ALTER TABLE [dbo].[swclientes] ADD [Codigo_Familia] [int] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Num_Prontuario')
	   ALTER TABLE [dbo].[swclientes] ADD [Num_Prontuario] [int] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Num_Prontuario_Papel')
	   ALTER TABLE [dbo].[swclientes] ADD [Num_Prontuario_Papel] [int] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Num_Pessoa_Domicilio')
	   ALTER TABLE [dbo].[swclientes] ADD [Num_Pessoa_Domicilio] [int] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Cor')
	   ALTER TABLE [dbo].[swclientes] ADD [Cor] [smallint] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'UF')
	   ALTER TABLE [dbo].[swclientes] ADD [UF] [varchar](2) NULL

    IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Nacionalidade')
	   ALTER TABLE [dbo].[swclientes] ADD [Nacionalidade] [smallint] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Pais_Origem')
       ALTER TABLE [dbo].[swclientes] ADD [Pais_Origem] [varchar](50) NULL

	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Data_Entrada_Brasil')
	   ALTER TABLE [dbo].[swclientes] ADD [Data_Entrada_Brasil] [datetime] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Numero_Portaria')
	   ALTER TABLE [dbo].[swclientes] ADD [Numero_Portaria] [varchar](20) NULL

	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Escolaridade')
	   ALTER TABLE [dbo].[swclientes] ADD [Escolaridade] [varchar](2) NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Situacao_Conjugal')
       ALTER TABLE [dbo].[swclientes] ADD [Situacao_Conjugal] [varchar](70) NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Frequenta_Escola')
	   ALTER TABLE [dbo].[swclientes] ADD [Frequenta_Escola] [bit] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Numero')
	   ALTER TABLE [dbo].[swclientes] ADD [Numero] [varchar](5) NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'CodTitular')
	   ALTER TABLE [dbo].[swclientes] ADD [CodTitular] [int] NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'CodIBGE')
	   ALTER TABLE [dbo].[swclientes] ADD [CodIBGE] [varchar](8) NULL

	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Tipo_Sanguineo')
	   ALTER TABLE [dbo].[swclientes] ADD [Tipo_Sanguineo] [varchar](2) NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'FatorRH')
	   ALTER TABLE [dbo].[swclientes] ADD [FatorRH] [char](1) NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Fumante')
	   ALTER TABLE [dbo].[swclientes] ADD [Fumante] [char](1) NULL

	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Cod_Nacionalidade')
	   ALTER TABLE [dbo].[swclientes] ADD [Cod_Nacionalidade] [int] NULL

	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'DDDTelefone1')
	   ALTER TABLE [dbo].[swclientes] ADD [DDDTelefone1] [varchar](2) NULL	

	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'DDDTelefone2')
	   ALTER TABLE [dbo].[swclientes] ADD [DDDTelefone2] [varchar](2) NULL	

	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'DDDTelefone3')
	   ALTER TABLE [dbo].[swclientes] ADD [DDDTelefone3] [varchar](2) NULL
	
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('swclientes') AND NAME = 'Importado')
	   ALTER TABLE [dbo].[swclientes] ADD [Importado] [bit] NULL
	   
	IF NOT EXISTS (SELECT * FROM SYSCOLUMNS WHERE ID = OBJECT_ID('MedSync') AND NAME = 'Destino')
	   ALTER TABLE [dbo].[MedSync] ADD [Destino] [varchar](50) NULL   
END
GO

/**********************************************************************************************/
-- Story: FÃ³rum 114733 - MudanÃ§a no cÃ³digo da SWClientes para auto incremento.
-- SoluÃ§Ãµes: Medsystem, Metra, Labsys, Gerclim e MedTiss.
-- Data: 05/04/2022
-- ResponsÃ¡vel: Welington Dias
/**********************************************************************************************/

IF(SELECT columnproperty(object_id('dbo.SWClientes'),'CÃ³digo','IsIdentity')) = 0
BEGIN	
   BEGIN TRANSACTION;

	--Cria tabela temporaria, ja com a coluna CÃ³digo como identity
	CREATE TABLE [dbo].[swclientes_1](	
	[CÃ³digo] [int] IDENTITY(1,1) NOT NULL,
	[CodSinco] [int] NULL,
	[Nome] [varchar](70) NULL,
	[Sexo] [varchar](1) NULL,
	[CPF] [varchar](15) NULL,
	[RaÃ§a] [varchar](1) NULL,
	[Estado Civil] [varchar](1) NULL,
	[Data de Nascimento] [datetime] NULL,
	[EndereÃ§o] [varchar](255) NULL,
	[Bairro] [varchar](70) NULL,
	[Cidade] [varchar](70) NULL,
	[Estado] [varchar](2) NULL,
	[CEP] [varchar](9) NULL,
	[Tipo 1] [varchar](1) NULL,
	[Telefone 1] [varchar](14) NULL,
	[Tipo 2] [varchar](1) NULL,
	[Telefone 2] [varchar](14) NULL,
	[Tipo 3] [varchar](1) NULL,
	[Telefone 3] [varchar](14) NULL,
	[E-Mail] [varchar](255) NULL,
	[CodConvenio] [int] NULL,
	[Convenio] [varchar](100) NULL,
	[Registro no ConvÃªnio] [varchar](40) NULL,
	[Plano] [varchar](100) NULL,
	[ObservaÃ§Ãµes] [text] NULL,
	[Alerta] [text] NULL,
	[Apagado] [bit] NULL,
	[Motivo] [text] NULL,
	[UsuÃ¡rio Removedor] [int] NULL,
	[UsuÃ¡rio Criador] [int] NULL,
	[RG] [varchar](50) NULL,
	[ValidadeCarteira] [datetime] NULL,
	[CNS] [varchar](50) NULL,
	[Responsavel] [varchar](70) NULL,
	[Pai] [varchar](70) NULL,
	[DataIdentidade] [datetime] NULL,
	[IdentOrgaoExp] [varchar](10) NULL,
	[IdentEstado] [varchar](2) NULL,
	[Refresh] [timestamp] NULL,
	[Data_Cadastro] [datetime] NULL,
	[Hora_Cadastro] [datetime] NULL,
	[CodPlano] [int] NULL,
	[CodEmpresa] [int] NULL,
	[Data_Integracao] [datetime] NULL,
	[Data_Remocao] [datetime] NULL,
	[Importado] [bit] NULL,
	[DDDTelefone1] [varchar](2) NULL,
	[DDDTelefone2] [varchar](2) NULL,
	[DDDTelefone3] [varchar](2) NULL,
	[Data_Retorno] [datetime] NULL,
	[Tipo_Logradouro] [varchar](3) NULL,
	[Numero_Logradouro] [varchar](5) NULL,
	[Complemento_Logradouro] [varchar](10) NULL,
	[Etnia] [varchar](10) NULL,
	[Codigo_Familia] [int] NULL,
	[Num_Prontuario] [int] NULL,
	[Num_Prontuario_Papel] [int] NULL,
	[Num_Pessoa_Domicilio] [int] NULL,
	[Cor] [smallint] NULL,
	[UF] [varchar](2) NULL,
	[Nacionalidade] [smallint] NULL,
	[Pais_Origem] [varchar](50) NULL,
	[Data_Entrada_Brasil] [datetime] NULL,
	[Numero_Portaria] [varchar](20) NULL,
	[Escolaridade] [varchar](2) NULL,
	[Situacao_Conjugal] [varchar](70) NULL,
	[Frequenta_Escola] [bit] NULL,
	[Numero] [varchar](5) NULL,
	[CodTitular] [int] NULL,
	[CodIBGE] [varchar](8) NULL,
	[Tipo_Sanguineo] [varchar](2) NULL,
	[FatorRH] [char](1) NULL,
	[Fumante] [char](1) NULL,
	[Cod_Nacionalidade] [int] NULL, 
 CONSTRAINT [swclientes_1_pk] PRIMARY KEY CLUSTERED 
(
	[CÃ³digo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

ALTER TABLE [dbo].[swclientes_1] ADD  DEFAULT ((0)) FOR [Importado]

	
	--Habilita inserÃ§ao em campo identity da tabela temporaria
	SET IDENTITY_INSERT dbo.[swclientes_1] ON
	
	--Transfere tabela swclientes para swclientes_l
	IF EXISTS(SELECT * FROM dbo.SWClientes) 
	 INSERT INTO dbo.[SWClientes_1] 
     ([CÃ³digo]
      ,[CodSinco]
      ,[Nome]
      ,[Sexo]
      ,[CPF]
      ,[RaÃ§a]
      ,[Estado Civil]
      ,[Data de Nascimento]
      ,[EndereÃ§o]
      ,[Bairro]
      ,[Cidade]
      ,[Estado]
      ,[CEP]
      ,[Tipo 1]
      ,[Telefone 1]
      ,[Tipo 2]
      ,[Telefone 2]
      ,[Tipo 3]
      ,[Telefone 3]
      ,[E-Mail]
      ,[CodConvenio]
      ,[Convenio]
      ,[Registro no ConvÃªnio]
      ,[Plano]
      ,[ObservaÃ§Ãµes]
      ,[Alerta]
      ,[Apagado]
      ,[Motivo]
      ,[UsuÃ¡rio Removedor] 
      ,[UsuÃ¡rio Criador]
      ,[RG]
      ,[ValidadeCarteira]
      ,[CNS]
      ,[Responsavel]
      ,[Pai]
      ,[DataIdentidade]
      ,[IdentOrgaoExp]
      ,[IdentEstado]      
	  ,[Data_Cadastro]
      ,[Hora_Cadastro]
      ,[CodPlano]
      ,[CodEmpresa]
      ,[Data_Integracao]
      ,[Data_Remocao]
      ,[Importado]
	  ,[DDDTelefone1]
      ,[DDDTelefone2]
      ,[DDDTelefone3]
      ,[Data_Retorno]
      ,[Tipo_Logradouro]
      ,[Numero_Logradouro]
      ,[Complemento_Logradouro]
      ,[Etnia]
      ,[Codigo_Familia]
      ,[Num_Prontuario]
      ,[Num_Prontuario_Papel]
      ,[Num_Pessoa_Domicilio]
      ,[Cor]
      ,[UF] 
      ,[Nacionalidade]
      ,[Pais_Origem]
      ,[Data_Entrada_Brasil]
      ,[Numero_Portaria]
      ,[Escolaridade]
      ,[Situacao_Conjugal]
      ,[Frequenta_Escola]
      ,[Numero]
      ,[CodTitular]
      ,[CodIBGE]
      ,[Tipo_Sanguineo]
      ,[FatorRH]
      ,[Fumante]
	  ,[Cod_Nacionalidade]) 

(SELECT [CÃ³digo]
      ,[CodSinco]
      ,[Nome]
      ,[Sexo]
      ,[CPF]
      ,[RaÃ§a]
      ,[Estado Civil]
      ,[Data de Nascimento]
      ,[EndereÃ§o]
      ,[Bairro]
      ,[Cidade]
      ,[Estado]
      ,[CEP]
      ,[Tipo 1]
      ,[Telefone 1]
      ,[Tipo 2]
      ,[Telefone 2]
      ,[Tipo 3]
      ,[Telefone 3]
      ,[E-Mail]
      ,[CodConvenio]
      ,[Convenio]
      ,[Registro no ConvÃªnio]
      ,[Plano]
      ,[ObservaÃ§Ãµes]
      ,[Alerta]
      ,[Apagado]
      ,[Motivo]
      ,[UsuÃ¡rio Removedor] 
      ,[UsuÃ¡rio Criador]
      ,[RG]
      ,[ValidadeCarteira]
      ,[CNS]
      ,[Responsavel]
      ,[Pai]
      ,[DataIdentidade]
      ,[IdentOrgaoExp]
      ,[IdentEstado]      
	  ,[Data_Cadastro]
      ,[Hora_Cadastro]
      ,[CodPlano]
      ,[CodEmpresa]
      ,[Data_Integracao]
      ,[Data_Remocao]
      ,[Importado]
	  ,[DDDTelefone1]
      ,[DDDTelefone2]
      ,[DDDTelefone3]
      ,[Data_Retorno]
      ,[Tipo_Logradouro]
      ,[Numero_Logradouro]
      ,[Complemento_Logradouro]
      ,[Etnia]
      ,[Codigo_Familia]
      ,[Num_Prontuario]
      ,[Num_Prontuario_Papel]
      ,[Num_Pessoa_Domicilio]
      ,[Cor]
      ,[UF] 
      ,[Nacionalidade]
      ,[Pais_Origem]
      ,[Data_Entrada_Brasil]
      ,[Numero_Portaria]
      ,[Escolaridade]
      ,[Situacao_Conjugal]
      ,[Frequenta_Escola]
      ,[Numero]
      ,[CodTitular]
      ,[CodIBGE]
      ,[Tipo_Sanguineo]
      ,[FatorRH]
      ,[Fumante]
	  ,[Cod_Nacionalidade] 
	  From SWClientes TABLOCK)
	
	--Desabilita inserÃ§ao em campo identity da tabela temporaria
	SET IDENTITY_INSERT dbo.[swclientes_1] OFF
	
	--Dropa as chaves estrangeiras das tabelas relacionadas
	DECLARE @Dropped_Sibrare BIT,
        @Dropped_Orcamentos BIT,
		@Dropped_ListaEspera BIT,
		@Dropped_Agendamento BIT,
		@Dropped_CursosProfissionais BIT,
		@Dropped_Resp BIT,
		@Dropped_EquipVed BIT
                
        SET @Dropped_Sibrare = 0
        SET @Dropped_Orcamentos = 0
		SET @Dropped_ListaEspera = 0
		SET @Dropped_Agendamento = 0
		SET @Dropped_CursosProfissionais = 0
		SET @Dropped_Resp = 0
		SET @Dropped_EquipVed = 0

        IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[Fk_paciente]') AND parent_object_id = OBJECT_ID(N'[dbo].[Sibrare_Prescricao_Man]'))
        BEGIN
             ALTER TABLE Sibrare_Prescricao_Man DROP CONSTRAINT Fk_paciente
             SET @Dropped_Sibrare = 1
        END

        IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_TSOrcamentos_swclientes]') AND parent_object_id = OBJECT_ID(N'[dbo].[TSOrcamentos]'))
        BEGIN
             ALTER TABLE TSOrcamentos DROP CONSTRAINT FK_TSOrcamentos_swclientes
             SET @Dropped_Orcamentos = 1
        END

        IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_SWAgListaEspera_swclientes]') AND parent_object_id = OBJECT_ID(N'[dbo].[SWAgListaEspera]'))
        BEGIN
             ALTER TABLE SWAgListaEspera DROP CONSTRAINT FK_SWAgListaEspera_swclientes
             SET @Dropped_ListaEspera = 1
        END

        IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_agPacientes_Agendamento_swclientes]') AND parent_object_id = OBJECT_ID(N'[dbo].[agPacientes_Agendamento]'))
        BEGIN
             ALTER TABLE agPacientes_Agendamento DROP CONSTRAINT FK_agPacientes_Agendamento_swclientes
             SET @Dropped_Agendamento = 1
        END

         IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_MTCursos_Profissionais_swclientes]') AND parent_object_id = OBJECT_ID(N'[dbo].[MTCursos_Profissionais]'))
        BEGIN
             ALTER TABLE MTCursos_Profissionais DROP CONSTRAINT FK_MTCursos_Profissionais_swclientes
             SET @Dropped_CursosProfissionais = 1
        END

        IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_MTQResp_swclientes]') AND parent_object_id = OBJECT_ID(N'[dbo].[MTQResp]'))
        BEGIN
             ALTER TABLE MTQResp DROP CONSTRAINT FK_MTQResp_swclientes
             SET @Dropped_Resp = 1
        END

        IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_MTEquipVed_swclientes]') AND parent_object_id = OBJECT_ID(N'[dbo].[MTEquipVed]'))
        BEGIN
             ALTER TABLE MTEquipVed DROP CONSTRAINT FK_MTEquipVed_swclientes
             SET @Dropped_EquipVed = 1
        END

	--Exclui tabela SWClientes
	DROP TABLE dbo.SWClientes
		
	--Renomeia SWClientes_l para SWClientes
	Exec sp_rename 'SWClientes_1', 'SWClientes'

	--Cria as chaves estrangeiras das tabelas relacionadas
    if(@Dropped_Sibrare = 1)
	BEGIN
	     ALTER TABLE Sibrare_Prescricao_Man ADD CONSTRAINT Fk_paciente FOREIGN KEY (paciente_cod) REFERENCES swclientes([CÃ³digo])
	END	
	
	if(@Dropped_Orcamentos = 1)
	BEGIN
	     ALTER TABLE TSOrcamentos ADD CONSTRAINT FK_TSOrcamentos_swclientes FOREIGN KEY (CodCliente) REFERENCES swclientes([CÃ³digo])
	END		
	
	if(@Dropped_ListaEspera = 1)
	BEGIN
	     ALTER TABLE SWAgListaEspera ADD CONSTRAINT FK_SWAgListaEspera_swclientes FOREIGN KEY (Cod_Cliente) REFERENCES swclientes([CÃ³digo])
	END	
	
	if(@Dropped_Agendamento = 1)
	BEGIN
	     ALTER TABLE agPacientes_Agendamento ADD CONSTRAINT FK_agPacientes_Agendamento_swclientes FOREIGN KEY (idPaciente) REFERENCES swclientes([CÃ³digo])
	END	
	
	if(@Dropped_CursosProfissionais = 1)
	BEGIN
	     ALTER TABLE MTCursos_Profissionais ADD CONSTRAINT FK_MTCursos_Profissionais_swclientes FOREIGN KEY (Cod_Cliente) REFERENCES swclientes([CÃ³digo]) 
	END	
	
	if(@Dropped_Resp = 1)
	BEGIN
	     ALTER TABLE MTQResp ADD CONSTRAINT FK_MTQResp_swclientes FOREIGN KEY (CodFuncionario) REFERENCES swclientes([CÃ³digo])
	END	
	
	if(@Dropped_EquipVed = 1)
	BEGIN
	     ALTER TABLE MTEquipVed ADD CONSTRAINT FK_MTEquipVed_swclientes FOREIGN KEY (CodFuncionario) REFERENCES swclientes([CÃ³digo]) 
	END	
	
	--Ajusta indice da swclientes de acordo o seu ultimo registro
	DECLARE @maxid int;
	SELECT @maxid=MAX([CÃ³digo]) FROM dbo.SWClientes;
	if(@maxid > 0)
	BEGIN
	     DBCC CHECKIDENT (SWClientes, RESEED, @maxid)
	END	
	
	--Cria trigger MedSync_Clientes na tabela SWClientes	
    IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[MedSync_Clientes]'))
    BEGIN
    BEGIN TRANSACTION;
	    exec ('CREATE TRIGGER [dbo].[MedSync_Clientes] ON  [dbo].[swclientes] AFTER INSERT,UPDATE
        AS 
        BEGIN
	        -- SET NOCOUNT ON added to prevent extra result sets from
	        -- interfering with SELECT statements.
	        SET NOCOUNT ON;

	        IF (SELECT COUNT(sincronizar) FROM SWUsuarios WHERE sincronizar = 1) > 0
		        AND (SELECT [CÃ³digo] FROM inserted) > 0
	        BEGIN

		        -- Insert statements for trigger here
		        DECLARE @Serial VARCHAR(50), @Codigo VARCHAR(50), @Nome VARCHAR(255), @Sexo VARCHAR(1),
				        @CPF VARCHAR(15), @Raca VARCHAR(1), @Estado_Civil VARCHAR(1), @Data_Nascimento VARCHAR(50),
				        @Endereco VARCHAR(70), @Bairro VARCHAR(70), @Cidade VARCHAR(70), @CEP VARCHAR(9),
				        @Tipo_1 VARCHAR(1), @Telefone_1 VARCHAR(14), @Tipo_2 VARCHAR(1), @Telefone_2 VARCHAR(14),
				        @Tipo_3 VARCHAR(1), @Telefone_3 VARCHAR(14), @Email VARCHAR(70), @CodConvenio VARCHAR(50),
				        @Convenio VARCHAR(100), @Registro_Convenio VARCHAR(40), @CodPlano VARCHAR(50), @Estado VARCHAR(2),
				        @Plano VARCHAR(100), @Apagado VARCHAR(50), @RG VARCHAR(50), @ValidadeCarteira VARCHAR(50),
				        @CNS VARCHAR(50), @Responsavel VARCHAR(70), @Pai VARCHAR(70), @DataRG VARCHAR(50),
				        @IdentOrgaoExp VARCHAR(10), @IdentEstado VARCHAR(2), @CodEmpresa VARCHAR(50), @Empresa VARCHAR(255)

		        SET @Serial = ''''
		        SET	@Codigo = ''''
		        SET @Nome = ''''
		        SET @Sexo  = ''''
		        SET @CPF  = ''''	
		        SET @Raca  = ''''
		        SET @Estado_Civil  = ''''
		        SET @Data_Nascimento  = ''''
		        SET @Endereco  = ''''
		        SET @Bairro  = ''''	
		        SET @Cidade  = ''''	
		        SET @CEP  = ''''	
		        SET @Tipo_1  = ''''
		        SET @Telefone_1  = ''''
		        SET @Tipo_2  = ''''
		        SET @Telefone_2  = ''''
		        SET @Tipo_3  = ''''
		        SET @Telefone_3  = ''''
		        SET @Email  = ''''
		        SET @CodConvenio  = ''''
		        SET @Convenio  = ''''	
		        SET @Registro_Convenio  = ''''
		        SET @CodPlano  = ''''
		        SET @Estado  = ''''	
		        SET @Plano  = ''''	
		        SET @Apagado  = ''''
		        SET @RG  = ''''	
		        SET @ValidadeCarteira  = ''''
		        SET @CNS  = ''''
		        SET @Responsavel  = ''''
		        SET @Pai  = ''''
		        SET @DataRG  = ''''
		        SET @IdentOrgaoExp  = ''''
		        SET @IdentEstado  = ''''	
		        SET @CodEmpresa  = ''''
		        SET @Empresa  = ''''

		        SELECT @Serial = dbo.FormatValue(Serial, '''') FROM SWClinica
		        IF @Serial = '''' RETURN
		
		        SELECT @Codigo = dbo.FormatValue([CÃ³digo],''''), @Nome = dbo.FormatValue(Nome,''''), @Sexo = dbo.FormatValue(Sexo,''''), @CPF = dbo.FormatValue(CPF,''''), @Raca = dbo.FormatValue([RaÃ§a],''''),
			           @Estado_Civil = dbo.FormatValue([Estado Civil],''''), @Data_Nascimento = dbo.FormatValue(CONVERT(VARCHAR,[Data de Nascimento],120),''''),
			           @Endereco = dbo.FormatValue([EndereÃ§o],''''), @Bairro = dbo.FormatValue(Bairro,''''), @Cidade = dbo.FormatValue(Cidade,''''), @Estado = dbo.FormatValue(Estado,''''),
			           @CEP = dbo.FormatValue(CEP,''''), @Tipo_1 = dbo.FormatValue([Tipo 1],''''), @Telefone_1 = dbo.FormatValue([Telefone 1],''''), @Tipo_2 = dbo.FormatValue([Tipo 2],''''),
			           @Telefone_2 = dbo.FormatValue([Telefone 2],''''), @Tipo_3 = dbo.FormatValue([Tipo 3],''''), @Telefone_3 = dbo.FormatValue([Telefone 3],''''),
			           @Email = dbo.FormatValue([E-Mail],''''), @CodConvenio = dbo.FormatValue(CodConvenio,''-1''), @Convenio = dbo.FormatValue(Name,''''), 
			           @Registro_Convenio = dbo.FormatValue([Registro no ConvÃªnio],''''), @CodPlano = dbo.FormatValue(CodPlano,''0''), @Plano = dbo.FormatValue(Plano,''''),
			           @Apagado = dbo.FormatValue(Apagado,''''), @RG = dbo.FormatValue(RG,''''), @ValidadeCarteira = dbo.FormatValue(CONVERT(VARCHAR,ValidadeCarteira,120),''1900-01-01''), @CNS = dbo.FormatValue(CNS,''''),
			           @Responsavel = dbo.FormatValue(Responsavel,''''), @Pai = dbo.FormatValue(Pai,''''), @DataRG = dbo.FormatValue(CONVERT(VARCHAR,DataIdentidade,120),''1900-01-01''), @IdentOrgaoExp = dbo.FormatValue(IdentOrgaoExp,''''),
			           @IdentEstado = dbo.FormatValue(IdentEstado,''''), @CodEmpresa = dbo.FormatValue(CodEmpresa,''0'')
		    FROM inserted LEFT OUTER JOIN convenio ON inserted.CodConvenio = convenio.Code

		    DECLARE @Comando NVARCHAR(4000)
			
		    -- MySQL
		    SET @Comando =	''INSERT '' + @Serial + ''_Clientes(Serial, Cod_Cliente, Nome, Sexo, CPF, Raca, Estado_Civil, '' +  Char(13) + Char(10) +
						    ''Data_Nascimento, Endereco, Bairro, Cidade, Estado, CEP, Tipo_1, Telefone_1, Tipo_2, Telefone_2, '' + Char(13) + Char(10) +
						    ''Tipo_3, Telefone_3, Email, CodConvenio, Convenio, Registro_Convenio, CodPlano, Plano, Apagado, '' +  Char(13) + Char(10) +
						    ''RG, ValidadeCarteira, CNS, Responsavel, Pai, DataRG, IdentOrgaoExp, IdentEstado, CodEmpresa) '' +  Char(13) + Char(10) +
						    '' VALUES('''''' + @Serial + '''''', '''''' + @Codigo + '''''', '''''' + @Nome + '''''','''''' + @Sexo + '''''','''''' + @CPF + '''''','''''' + @Raca + '''''''' +  Char(13) + Char(10) +
						    '','''''' + @Estado_Civil + '''''','''''' + @Data_Nascimento + '''''','''''' + @Endereco + '''''','''''' + @Bairro + '''''''' +  Char(13) + Char(10) +
						    '','''''' + @Cidade + '''''','''''' + @Estado + '''''','''''' + @CEP + '''''','''''' + @Tipo_1 + '''''','''''' + @Telefone_1 + ''''''''+ Char(13) + Char(10) +
						    '','''''' + @Tipo_2 + '''''','''''' + @Telefone_2 + '''''','''''' + @Tipo_3 + '''''','''''' + @Telefone_3 + '''''''' +  Char(13) + Char(10) +
						    '','''''' + @Email + '''''','''''' + @CodConvenio + '''''','''''' + @Convenio + '''''','''''' + @Registro_Convenio + '''''''' +  Char(13) + Char(10) +
						    '','''''' + @CodPlano + '''''','''''' + @Plano + '''''','''''' + @Apagado + '''''','''''' + @RG + '''''','''''' + @ValidadeCarteira + '''''''' +  Char(13) + Char(10) +
						    '','''''' + @CNS + '''''','''''' + @Responsavel + '''''','''''' + @Pai + '''''','''''' + @DataRG + '''''','''''' + @IdentOrgaoExp + '''''''' +  Char(13) + Char(10) +
						    '','''''' + @IdentEstado + '''''','''''' + @CodEmpresa + '''''')'' + Char(13) + Char(10) +
						    ''ON DUPLICATE KEY UPDATE Serial = '''''' + @Serial + '''''', Nome = '''''' + @Nome + '''''', SEXO = '''''' + @Sexo + '''''''' + Char(13) + Char(10) +
						    '',  CPF = '''''' + @CPF + '''''', Raca = '''''' + @Raca + '''''', Estado_Civil = '''''' + @Estado_Civil + '''''''' +  Char(13) + Char(10) +
						    '',  Data_Nascimento = '''''' + @Data_Nascimento + '''''', Endereco = '''''' + @Endereco + '''''', Bairro = '''''' + @Bairro + '''''''' + Char(13) + Char(10) +
						    '',  Cidade = '''''' + @Cidade + '''''', Estado = '''''' + @Estado + '''''', CEP = '''''' + @CEP + '''''''' +  Char(13) + Char(10) +
						    '',  Tipo_1 = '''''' + @Tipo_1 + '''''', Telefone_1 = '''''' + @Telefone_1 + '''''', Tipo_2 = '''''' + @Tipo_2 + '''''''' + Char(13) + Char(10) +
						    '',  Telefone_2 = '''''' + @Telefone_2 + '''''', Tipo_3 = '''''' + @Tipo_3 + '''''', Telefone_3 = '''''' + @Telefone_3 + '''''''' + Char(13) + Char(10) +
						    '',  Email = '''''' + @Email + '''''', CodConvenio = '''''' + @CodConvenio + '''''', Convenio = '''''' + @Convenio + '''''''' + Char(13) + Char(10) +
						    '',  Registro_Convenio = '''''' + @Registro_Convenio + '''''', CodPlano = '''''' + @CodPlano + '''''', Plano = '''''' + @Plano + '''''''' + Char(13) + Char(10) +
						    '',  Apagado = '''''' + @Apagado + '''''', RG = '''''' + @RG + '''''', ValidadeCarteira = '''''' + @ValidadeCarteira + '''''''' + Char(13) + Char(10) +
						    '',  CNS = '''''' + @CNS + '''''', Responsavel = '''''' + @Responsavel + '''''', Pai = '''''' + @Pai + '''''', DataRG = '''''' + @DataRG + '''''''' + Char(13) + Char(10) +
						    '',  IdentOrgaoExp = '''''' + @IdentOrgaoExp + '''''', IdentEstado = '''''' + @IdentEstado + '''''', CodEmpresa = '''''' + @CodEmpresa + ''''''''

	      --PRINT @Comando
		      DECLARE @COD INT SELECT @COD = ISNULL(MAX(Ordem), 0) + 1 FROM MedSync
		      INSERT INTO MedSync(Serial, Data, Hora, [Status], Comando, Ordem) VALUES(@Serial, GETDATE(), GETDATE(), 0, @Comando, @COD)
	      END
      END') 	
	COMMIT TRANSACTION;
    END

    --Cria trigger TR_Clientes na tabela SWClientes	
    IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[TR_Clientes]'))
    BEGIN
    BEGIN TRANSACTION;
	    exec ('CREATE TRIGGER [dbo].[TR_Clientes] ON  [dbo].[swclientes] AFTER INSERT,UPDATE
        AS 
        BEGIN
	        SET NOCOUNT ON;    
	        DECLARE @Cod_Cliente VARCHAR(15), 
		    @NomeCliente VARCHAR(70), 
		    @Cod_Clinica VARCHAR(10),			
		    @Serial	     VARCHAR(50),
		    @CPF	     VARCHAR(15), 
		    @Sexo	     VARCHAR(1),
		    @DataNasc    VARCHAR(20), 
		    @Excluido    VARCHAR(15), 
		    @CNPJ	     VARCHAR(15),				
		    @Comando     VARCHAR(max)	

	        SELECT @Serial = ISNULL(Serial, ''''), 
		       @Cod_Clinica = Cod_Clinica 
	          FROM SWClinica
	            IF @Serial = '''' RETURN

	        SELECT @NomeCliente = Nome, 
		           @CPF 	    = ISNULL(CPF, ''''), 
    		       @Sexo 	    = ISNULL(Sexo, ''''),     		    		
    		       @Cod_Cliente = [CÃ³digo],
    		       @Excluido    = ISNULL(Apagado, 0),     		    		
		           @DataNasc    = CONVERT(char(10), [Data de Nascimento],126)	  
	          FROM inserted	   
	 	   	 
	        SET @Comando = ''CALL SP_Clientes(''
			    + '''''''' + @Serial		+ '''''','' 
			    + '''''''' + @Cod_Cliente	+ '''''',''
			    + '''''''' + REPLACE(@NomeCliente,'''''''','''''''''''')	+ '''''',''			 
			    + '''''''' + @Sexo		+ '''''','' 
			    + '''''''' + @DataNasc		+ '''''','' 
			    + '''''''' + @CPF		+ '''''',''		
			    + '''''''' + @Excluido       	+ '''''')'';
	        IF (@Comando is not null)
	        BEGIN
	             INSERT INTO dbo.MedSync (Serial, Data, Hora, Status, Comando, Destino)
	             VALUES (@Serial, getdate(), getdate(), 0, @Comando, ''AgendaMT'')	
	        END	
       END') 	
    COMMIT TRANSACTION;
    END
COMMIT TRANSACTION;
END
GO

/**********************************************************************************************/
-- FÃ³rum: 114733 - Retira o registro tipo 3 da Sgcfind apÃ³s execuÃ§Ã£o do script de auto incremento
-- Data: 14/04/2022
-- ResponsÃ¡vel: Welington Dias
/**********************************************************************************************/

IF EXISTS (SELECT * FROM Sgcfind WHERE Tipo = 3)
BEGIN
      DELETE FROM Sgcfind WHERE Tipo = 3
END
GO

/**********************************************************************************************/
-- Altera o tamanho do campo EmailSolic no anexo de Radioterapia
-- Data: 10/06/2022
-- ResponsÃ¡vel: Lucas Silva
/**********************************************************************************************/

BEGIN
ALTER TABLE tsRadioterapia
ALTER COLUMN EmailSolic VARCHAR(1000) NULL
END
GO
